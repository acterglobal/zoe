// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'services/blob_store.dart';
import 'services/messages.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `RelayClientInner`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Connection>>
abstract class Connection implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RelayClient>>
abstract class RelayClient implements RustOpaqueInterface {
  /// Connect to relay server and return the connection
  static Future<Connection> connect({
    required SigningKey clientKey,
    required SocketAddr serverAddr,
    required VerifyingKey serverPublicKey,
  }) => RustLib.instance.api.zoeClientClientRelayClientConnect(
    clientKey: clientKey,
    serverAddr: serverAddr,
    serverPublicKey: serverPublicKey,
  );

  Future<BlobService> connectBlobService();

  Future<(MessagesService, UnboundedReceiverStreamMessage)>
  connectMessageService();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<RelayClient> newInstance({
    required SigningKey key,
    required VerifyingKey serverPublicKey,
    required SocketAddr serverAddr,
  }) => RustLib.instance.api.zoeClientClientRelayClientNew(
    key: key,
    serverPublicKey: serverPublicKey,
    serverAddr: serverAddr,
  );

  static Future<RelayClient> newWithRandomKey({
    required VerifyingKey serverPublicKey,
    required SocketAddr serverAddr,
  }) => RustLib.instance.api.zoeClientClientRelayClientNewWithRandomKey(
    serverPublicKey: serverPublicKey,
    serverAddr: serverAddr,
  );

  /// Get the client's public key
  Future<VerifyingKey> publicKey();

  Future<void> signingKey();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<SocketAddr>>
abstract class SocketAddr implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<VerifyingKey>>
abstract class VerifyingKey implements RustOpaqueInterface {}
