// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import '../zoe_wire_protocol/crypto.dart';
import '../zoe_wire_protocol/keys.dart';
import '../zoe_wire_protocol/primitives.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'state.dart';

// These functions are ignored because they have generic arguments: `create_group_activity_event`, `create_group_update_event`, `create_leave_group_event`, `create_role_update_event`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `CreateGroupResult`, `GroupDataUpdate`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `add_group_session`, `builder`, `create_group_event_message`, `create_group_subscription_filter`, `create_group`, `create_key_from_mnemonic`, `process_group_event`, `recover_key_from_mnemonic`, `remove_group_session`, `rotate_group_key`, `subscribe_to_updates`, `user_groups`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `with_sessions`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GroupManager>>
abstract class GroupManager implements RustOpaqueInterface {
  /// Get all managed group sessions
  Future<Map<MessageId, GroupSession>> allGroupSessions();

  /// Get all managed groups (state only, for backward compatibility)
  Future<Map<MessageId, GroupState>> allGroups();

  static Future<GroupManager> default_() =>
      RustLib.instance.api.zoeStateMachineGroupGroupManagerDefault();

  /// Generate a new encryption key for a group (ChaCha20-Poly1305)
  static Future<EncryptionKey> generateGroupKey({required BigInt timestamp}) =>
      RustLib.instance.api.zoeStateMachineGroupGroupManagerGenerateGroupKey(
        timestamp: timestamp,
      );

  /// Get a group session (state + encryption)
  Future<GroupSession?> groupSession({required MessageId groupId});

  /// Get a group's current state
  Future<GroupState?> groupState({required MessageId groupId});

  /// Check if a user is a member of a specific group
  Future<bool> isMember({
    required MessageId groupId,
    required VerifyingKey user,
  });

  /// Get a user's role in a specific group
  Future<GroupRole?> memberRole({
    required MessageId groupId,
    required VerifyingKey user,
  });
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GroupManagerBuilder>>
abstract class GroupManagerBuilder implements RustOpaqueInterface {
  Future<GroupManager> build();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GroupRole>>
abstract class GroupRole implements RustOpaqueInterface {}
