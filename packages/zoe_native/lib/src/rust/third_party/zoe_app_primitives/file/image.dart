// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../file.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `eq`, `fmt`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `with_alt_text`, `with_caption`, `with_dimensions`, `with_format`, `with_metadata`, `with_structured_metadata`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Image>>
abstract class Image implements RustOpaqueInterface {
  /// Get the aspect ratio (width/height) if dimensions are available
  Future<double?> aspectRatio();

  /// Get all generic metadata as a key-value map for backward compatibility
  ///
  /// This method extracts only the `Metadata::Generic(key, value)` entries and returns them
  /// as a `BTreeMap<String, String>` for backward compatibility with APIs that expect
  /// key-value metadata.
  Future<BTreeMapStringString> genericMetadata();

  /// Check if this is a square image
  Future<bool?> isSquare();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create a new Image with just a file reference
  static Future<Image> newInstance({required FileRef fileRef}) =>
      RustLib.instance.api.zoeAppPrimitivesFileImageImageNew(fileRef: fileRef);
}
