// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `eq`, `fmt`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `with_content_type`, `with_metadata`, `with_structured_metadata`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<BTreeMap < String , String >>>
abstract class BTreeMapStringString implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<ConvergentEncryptionInfo>>
abstract class ConvergentEncryptionInfo implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<FileRef>>
abstract class FileRef implements RustOpaqueInterface {
  /// Get file extension from the filename (if available)
  Future<String?> fileExtension();

  /// Get the filename (if available)
  Future<String?> filename();

  /// Get all generic metadata as a key-value map for backward compatibility
  ///
  /// This method extracts only the `Metadata::Generic(key, value)` entries and returns them
  /// as a `BTreeMap<String, String>` for backward compatibility with APIs that expect
  /// key-value metadata.
  Future<BTreeMapStringString> genericMetadata();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create a new FileRef with minimal required fields
  static Future<FileRef> newInstance({
    required String blobHash,
    required ConvergentEncryptionInfo encryptionInfo,
    String? filename,
  }) => RustLib.instance.api.zoeAppPrimitivesFileFileRefNew(
    blobHash: blobHash,
    encryptionInfo: encryptionInfo,
    filename: filename,
  );

  /// Get the original file size (from encryption info)
  Future<BigInt> originalSize();
}
