// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../../lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `cmp`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `from`, `from`, `from`, `from`, `partial_cmp`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `addresses_with_port`, `all_addresses`, `display_name`, `id`, `new`, `primary_address`, `with_address_str`, `with_address`, `with_addresses`, `with_name`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `dns_with_port`, `dns`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Ipv4Addr>>
abstract class Ipv4Addr implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<Ipv6Addr>>
abstract class Ipv6Addr implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<NetworkAddress>>
abstract class NetworkAddress implements RustOpaqueInterface {
  /// Create an IPv4 network address
  static Future<NetworkAddress> ipv4({required Ipv4Addr address}) => RustLib
      .instance
      .api
      .zoeAppPrimitivesConnectionNetworkAddressIpv4(address: address);

  /// Create an IPv4 network address with port
  static Future<NetworkAddress> ipv4WithPort({
    required Ipv4Addr address,
    required int port,
  }) =>
      RustLib.instance.api.zoeAppPrimitivesConnectionNetworkAddressIpv4WithPort(
        address: address,
        port: port,
      );

  /// Create an IPv6 network address
  static Future<NetworkAddress> ipv6({required Ipv6Addr address}) => RustLib
      .instance
      .api
      .zoeAppPrimitivesConnectionNetworkAddressIpv6(address: address);

  /// Create an IPv6 network address with port
  static Future<NetworkAddress> ipv6WithPort({
    required Ipv6Addr address,
    required int port,
  }) =>
      RustLib.instance.api.zoeAppPrimitivesConnectionNetworkAddressIpv6WithPort(
        address: address,
        port: port,
      );

  /// Get the port if specified
  Future<int?> port();

  /// Get the port if specified, otherwise return the default port
  Future<int> portOrDefault({required int defaultPort});

  /// Resolve this network address to a socket address
  ///
  /// For IP addresses, returns immediately. For DNS addresses, performs resolution.
  Future<SocketAddr> resolveToSocketAddr({required int defaultPort});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<RelayAddress>>
abstract class RelayAddress implements RustOpaqueInterface {}
