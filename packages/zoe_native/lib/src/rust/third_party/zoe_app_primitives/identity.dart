// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../zoe_wire_protocol/keys.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `IdentityInfo`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `cmp`, `cmp`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `hash`, `hash`, `partial_cmp`, `partial_cmp`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IdentityRef>>
abstract class IdentityRef implements RustOpaqueInterface {
  /// Get the controlling verifying key for this identity
  Future<VerifyingKey> controllingKey();

  /// Get a display string for this identity (used when no display name is set)
  Future<String> fallbackDisplay();

  /// Check if this identity is controlled by the given key
  Future<bool> isControlledBy({required VerifyingKey key});

  /// Check if this identity is controlled by the given ML-DSA key
  /// This is a compatibility method for the ML-DSA transition
  Future<bool> isControlledByMlDsa({required VerifyingKey key});
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<IdentityType>>
abstract class IdentityType implements RustOpaqueInterface {}
