// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'roles.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `clone`, `eq`, `eq`, `eq`, `fmt`, `fmt`, `fmt`, `from`, `from`, `into`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `assign_roles`, `post_activities`, `update_encryption`, `update_group`

/// Actions that can be performed in a group
enum GroupAction {
  /// Update group settings and metadata
  updateGroup,

  /// Assign roles to members
  assignRoles,

  /// Post activities in the group
  postActivities,

  /// Update encryption settings
  updateEncryption,
}

/// Permissions for group actions in encrypted groups
///
/// Defines who can perform various actions within the group based on their role.
class GroupPermissions {
  /// Who can update group settings
  final Permission updateGroup;

  /// Who can assign roles to other members
  final Permission assignRoles;

  /// Who can post activities (typically all key holders)
  final Permission postActivities;

  /// Who can update group encryption settings
  final Permission updateEncryption;

  const GroupPermissions({
    required this.updateGroup,
    required this.assignRoles,
    required this.postActivities,
    required this.updateEncryption,
  });

  /// Check if a role can perform a specific action
  Future<bool> canPerformAction({
    required GroupRole role,
    required GroupAction action,
  }) => RustLib.instance.api
      .zoeAppPrimitivesGroupEventsPermissionsGroupPermissionsCanPerformAction(
        that: this,
        role: role,
        action: action,
      );

  static Future<GroupPermissions> default_() => RustLib.instance.api
      .zoeAppPrimitivesGroupEventsPermissionsGroupPermissionsDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create a new GroupPermissions with custom settings
  static Future<GroupPermissions> newInstance() => RustLib.instance.api
      .zoeAppPrimitivesGroupEventsPermissionsGroupPermissionsNew();

  @override
  int get hashCode =>
      updateGroup.hashCode ^
      assignRoles.hashCode ^
      postActivities.hashCode ^
      updateEncryption.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is GroupPermissions &&
          runtimeType == other.runtimeType &&
          updateGroup == other.updateGroup &&
          assignRoles == other.assignRoles &&
          postActivities == other.postActivities &&
          updateEncryption == other.updateEncryption;
}

/// Permission levels for group actions
///
/// Defines the minimum role level required to perform certain actions.
enum Permission {
  /// Only group owners
  ownerOnly,

  /// Owners and admins
  adminOrAbove,

  /// Owners, admins, and moderators
  moderatorOrAbove,

  /// Any group member
  allMembers,
}
