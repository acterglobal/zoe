// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'permissions.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `clone`, `cmp`, `eq`, `fmt`, `from`, `from`, `into`, `partial_cmp`

/// Roles within a group
///
/// Hierarchical roles that determine what actions a member can perform.
/// Roles are ordered from highest (Owner) to lowest (Member) privilege.
enum GroupRole {
  /// Group owner (highest privilege)
  ///
  /// Can perform all actions including deleting the group and managing all other roles.
  owner,

  /// Administrator
  ///
  /// Can manage most group settings and moderate other members.
  admin,

  /// Moderator
  ///
  /// Can moderate discussions and manage some group settings.
  moderator,

  /// Regular member
  ///
  /// Basic participation rights, can post activities and read group content.
  member;

  /// Check if this role can assign the target role to another member
  ///
  /// Generally, you can only assign roles that are lower than your own.
  Future<bool> canAssignRole({required GroupRole targetRole}) => RustLib
      .instance
      .api
      .zoeAppPrimitivesGroupEventsRolesGroupRoleCanAssignRole(
        that: this,
        targetRole: targetRole,
      );

  /// Get a human-readable name for this role
  Future<void> displayName() => RustLib.instance.api
      .zoeAppPrimitivesGroupEventsRolesGroupRoleDisplayName(that: this);

  /// Check if this role has the required permission level
  ///
  /// Returns true if this role meets or exceeds the required permission level.
  Future<bool> hasPermission({required Permission required_}) => RustLib
      .instance
      .api
      .zoeAppPrimitivesGroupEventsRolesGroupRoleHasPermission(
        that: this,
        required_: required_,
      );
}
