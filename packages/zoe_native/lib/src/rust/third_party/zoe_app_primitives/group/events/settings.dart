// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'permissions.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `assert_receiver_is_total_eq`, `assert_receiver_is_total_eq`, `clone`, `clone`, `eq`, `eq`, `fmt`, `fmt`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `encryption_settings`, `permissions`, `with_key_rotation`

/// Encryption-related settings for a group
///
/// Controls various encryption and security features for the group.
class EncryptionSettings {
  /// Whether to rotate keys periodically (future feature)
  ///
  /// When enabled, the group will periodically rotate its encryption keys
  /// to provide forward secrecy.
  final bool keyRotationEnabled;

  /// Key rotation interval in seconds (if enabled)
  ///
  /// How often to rotate keys when key rotation is enabled.
  final BigInt? keyRotationInterval;

  const EncryptionSettings({
    required this.keyRotationEnabled,
    this.keyRotationInterval,
  });

  static Future<EncryptionSettings> default_() => RustLib.instance.api
      .zoeAppPrimitivesGroupEventsSettingsEncryptionSettingsDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create new encryption settings
  static Future<EncryptionSettings> newInstance() => RustLib.instance.api
      .zoeAppPrimitivesGroupEventsSettingsEncryptionSettingsNew();

  @override
  int get hashCode =>
      keyRotationEnabled.hashCode ^ keyRotationInterval.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is EncryptionSettings &&
          runtimeType == other.runtimeType &&
          keyRotationEnabled == other.keyRotationEnabled &&
          keyRotationInterval == other.keyRotationInterval;
}

/// Group settings and configuration for encrypted groups
///
/// These settings control various aspects of group behavior and permissions.
class GroupSettings {
  /// Required permissions for various actions
  final GroupPermissions permissions;

  /// Group encryption and security settings
  final EncryptionSettings encryptionSettings;

  const GroupSettings({
    required this.permissions,
    required this.encryptionSettings,
  });

  static Future<GroupSettings> default_() => RustLib.instance.api
      .zoeAppPrimitivesGroupEventsSettingsGroupSettingsDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create new group settings with default permissions
  static Future<GroupSettings> newInstance() => RustLib.instance.api
      .zoeAppPrimitivesGroupEventsSettingsGroupSettingsNew();

  @override
  int get hashCode => permissions.hashCode ^ encryptionSettings.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is GroupSettings &&
          runtimeType == other.runtimeType &&
          permissions == other.permissions &&
          encryptionSettings == other.encryptionSettings;
}
