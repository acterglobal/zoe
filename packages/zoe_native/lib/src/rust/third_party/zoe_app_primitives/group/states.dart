// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../../zoe_wire_protocol/keys.dart';
import '../identity.dart';
import 'events/roles.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `GroupMember`, `GroupStateError`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `clone`, `fmt`, `fmt`, `fmt`, `fmt`, `fmt`
// These functions are ignored (category: IgnoreBecauseExplicitAttribute): `apply_event`, `check_permission`, `description`, `from_group_info`, `generic_metadata`, `get_members`, `is_member`, `member_role`, `new`, `to_group_info`

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GroupMembership>>
abstract class GroupMembership implements RustOpaqueInterface {
  static Future<GroupMembership> default_() =>
      RustLib.instance.api.zoeAppPrimitivesGroupStatesGroupMembershipDefault();

  /// Get all identities that a verifying key can act as
  Future<Set<IdentityRef>> getAvailableIdentities({required VerifyingKey key});

  /// Get display name for an identity
  Future<String> getDisplayName({
    required VerifyingKey key,
    required IdentityType identityType,
  });

  /// Get effective role when a key acts as a specific identity
  Future<GroupRole?> getEffectiveRole({
    required VerifyingKey key,
    String? actingAsAlias,
  });

  /// Get the role for a specific identity
  Future<GroupRole?> getRole({required IdentityRef identityRef});

  /// Check if an identity has been declared by a key
  Future<bool> hasIdentityInfo({
    required VerifyingKey key,
    required IdentityType identityType,
  });

  /// Check if a verifying key is authorized to act as a specific identity
  Future<bool> isAuthorized({
    required VerifyingKey key,
    required IdentityRef identityRef,
  });

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  /// Create a new empty membership state
  static Future<GroupMembership> newInstance() =>
      RustLib.instance.api.zoeAppPrimitivesGroupStatesGroupMembershipNew();
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<GroupState>>
abstract class GroupState implements RustOpaqueInterface {}
