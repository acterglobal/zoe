// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they have generic arguments: `display_qr_code`, `generate_qr_data`, `generate_qr_string`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `QrError`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `fmt`, `fmt`, `fmt`, `from`, `from`, `source`
// These functions have error during generation (see debug logs or enable `stop_on_error: true` for more details): `new`, `with_border_width`, `with_footer`, `with_subtitle`

/// Generate a QR code from plain text and return the visual representation as a string
///
/// This function creates a QR code from plain text (like URLs) without serialization
/// and returns it as a string that can be printed to the console.
///
/// # Arguments
/// * `text` - The plain text to encode in the QR code
/// * `options` - Display options for the QR code
///
/// # Returns
/// * `QrResult<String>` - The QR code as a printable string
///
/// # Examples
/// ```
/// use zoe_app_primitives::qr::{generate_qr_string_from_text, QrOptions};
///
/// let url = "https://signal.org/#eu_EQIlw-O0NmftmVoqUlKZiwlqcTMG0ybgChE8XQtjn2WSHw";
/// let options = QrOptions::new("ðŸ“± SIGNAL LINKING").with_footer("Scan with Signal app");
/// let qr_string = generate_qr_string_from_text(url, &options).unwrap();
/// println!("{}", qr_string);
/// ```
Future<QrResultString> generateQrStringFromText({
  required String text,
  required QrOptions options,
}) => RustLib.instance.api.zoeAppPrimitivesQrGenerateQrStringFromText(
  text: text,
  options: options,
);

/// Display a QR code to stdout from a plain string
///
/// This function generates a QR code from a plain string (like URLs) without serialization.
/// Use this for simple text data like URLs, connection strings, etc.
///
/// # Arguments
/// * `text` - The plain text to encode in the QR code
/// * `options` - Display options for the QR code
///
/// # Returns
/// * `QrResult<()>` - Success or error
///
/// # Examples
/// ```
/// use zoe_app_primitives::qr::{display_qr_code_from_string, QrOptions};
///
/// let url = "https://signal.org/#eu_EQIlw-O0NmftmVoqUlKZiwlqcTMG0ybgChE8XQtjn2WSHw";
/// let options = QrOptions::new("ðŸ“± SIGNAL LINKING")
///     .with_subtitle("Scan with Signal mobile app")
///     .with_footer("Link expires in 10 minutes");
/// display_qr_code_from_string(url, &options).unwrap();
/// ```
Future<QrResult> displayQrCodeFromString({
  required String text,
  required QrOptions options,
}) => RustLib.instance.api.zoeAppPrimitivesQrDisplayQrCodeFromString(
  text: text,
  options: options,
);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QrResult < () >>>
abstract class QrResult implements RustOpaqueInterface {}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<QrResult < String >>>
abstract class QrResultString implements RustOpaqueInterface {}

/// QR code generation options
class QrOptions {
  /// Title to display above the QR code
  final String title;

  /// Subtitle lines to display below the title
  final List<String> subtitleLines;

  /// Footer message to display below the QR code
  final String footer;

  /// Width of the display border (in characters)
  final BigInt borderWidth;

  const QrOptions({
    required this.title,
    required this.subtitleLines,
    required this.footer,
    required this.borderWidth,
  });

  static Future<QrOptions> default_() =>
      RustLib.instance.api.zoeAppPrimitivesQrQrOptionsDefault();

  @override
  int get hashCode =>
      title.hashCode ^
      subtitleLines.hashCode ^
      footer.hashCode ^
      borderWidth.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is QrOptions &&
          runtimeType == other.runtimeType &&
          title == other.title &&
          subtitleLines == other.subtitleLines &&
          footer == other.footer &&
          borderWidth == other.borderWidth;
}
