// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import '../third_party/zoe_client/client.dart';
import '../third_party/zoe_client/system_check.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

Stream<SystemCheckResults> runSystemTests({required Client client}) =>
    RustLib.instance.api.crateApiSystemTestRunSystemTests(client: client);

Future<bool> systemCheckResultsIsSuccess({
  required SystemCheckResults results,
}) => RustLib.instance.api.crateApiSystemTestSystemCheckResultsIsSuccess(
  results: results,
);

Future<int> systemCheckResultsPassedCount({
  required SystemCheckResults results,
}) => RustLib.instance.api.crateApiSystemTestSystemCheckResultsPassedCount(
  results: results,
);

Future<int> systemCheckResultsFailedCount({
  required SystemCheckResults results,
}) => RustLib.instance.api.crateApiSystemTestSystemCheckResultsFailedCount(
  results: results,
);

Future<int> systemCheckResultsTotalCount({
  required SystemCheckResults results,
}) => RustLib.instance.api.crateApiSystemTestSystemCheckResultsTotalCount(
  results: results,
);

Future<BigInt> systemCheckResultsTotalDurationMs({
  required SystemCheckResults results,
}) => RustLib.instance.api.crateApiSystemTestSystemCheckResultsTotalDurationMs(
  results: results,
);

Future<List<TestCategory>> systemCheckResultsGetCategories({
  required SystemCheckResults results,
}) => RustLib.instance.api.crateApiSystemTestSystemCheckResultsGetCategories(
  results: results,
);

Future<List<TestInfo>> systemCheckResultsGetTestsForCategory({
  required SystemCheckResults results,
  required TestCategory category,
}) => RustLib.instance.api
    .crateApiSystemTestSystemCheckResultsGetTestsForCategory(
      results: results,
      category: category,
    );

Future<bool> systemCheckResultsCategoryHasFailures({
  required SystemCheckResults results,
  required TestCategory category,
}) => RustLib.instance.api
    .crateApiSystemTestSystemCheckResultsCategoryHasFailures(
      results: results,
      category: category,
    );

Future<String> testInfoGetName({required TestInfo test}) =>
    RustLib.instance.api.crateApiSystemTestTestInfoGetName(test: test);

Future<List<String>> testInfoGetDetails({required TestInfo test}) =>
    RustLib.instance.api.crateApiSystemTestTestInfoGetDetails(test: test);

Future<bool> testInfoIsPassed({required TestInfo test}) =>
    RustLib.instance.api.crateApiSystemTestTestInfoIsPassed(test: test);

Future<bool> testInfoIsFailed({required TestInfo test}) =>
    RustLib.instance.api.crateApiSystemTestTestInfoIsFailed(test: test);

Future<String?> testInfoGetError({required TestInfo test}) =>
    RustLib.instance.api.crateApiSystemTestTestInfoGetError(test: test);

Future<BigInt> testInfoDurationMs({required TestInfo test}) =>
    RustLib.instance.api.crateApiSystemTestTestInfoDurationMs(test: test);
