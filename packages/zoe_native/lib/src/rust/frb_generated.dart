// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/client.dart';
import 'api/simple.dart';
import 'api/system_test.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'lib.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'third_party/zoe_client/client.dart';
import 'third_party/zoe_client/client/api.dart';
import 'third_party/zoe_client/client/api/file_storage.dart';
import 'third_party/zoe_client/frb_api.dart';
import 'third_party/zoe_client/system_check.dart';
import 'third_party/zoe_client/util.dart';
import 'third_party/zoe_state_machine/group.dart';
import 'third_party/zoe_state_machine/state.dart';
import 'third_party/zoe_wire_protocol/crypto.dart';
import 'third_party/zoe_wire_protocol/keys.dart';
import 'third_party/zoe_wire_protocol/primitives.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => 424019533;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'zoe_native',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  Future<void> zoeClientClientClientBuilderAutoconnect({
    required ClientBuilder that,
    required bool autoconnect,
  });

  Future<Client> zoeClientClientClientBuilderBuild({
    required ClientBuilder that,
  });

  Future<void> zoeClientClientClientBuilderClientSecret({
    required ClientBuilder that,
    required ClientSecret secret,
  });

  Future<void> zoeClientClientClientBuilderDbStorageDir({
    required ClientBuilder that,
    required String path,
  });

  Future<ClientBuilder> zoeClientClientClientBuilderDefault();

  Future<void> zoeClientClientClientBuilderEncryptionKey({
    required ClientBuilder that,
    required U8Array32 key,
  });

  Future<void> zoeClientClientClientBuilderMediaStorageDir({
    required ClientBuilder that,
    required String mediaStorageDir,
  });

  Future<void> zoeClientClientClientBuilderServerInfo({
    required ClientBuilder that,
    required VerifyingKey serverPublicKey,
    required SocketAddr serverAddr,
  });

  Future<void> zoeClientClientClientBuilderServers({
    required ClientBuilder that,
    required List<RelayAddress> servers,
  });

  Future<ClientSecret> zoeClientClientClientSecretFromHex({
    required String hex,
  });

  Future<void> zoeClientClientClientSecretServers({required ClientSecret that});

  Future<String> zoeClientClientClientSecretToHex({required ClientSecret that});

  Future<void> zoeClientClientClientAddRelay({
    required Client that,
    required RelayAddress address,
  });

  Future<ClientBuilder> zoeClientClientClientBuilder();

  Future<ClientSecret> zoeClientClientClientClientSecret({
    required Client that,
  });

  Future<String> zoeClientClientClientClientSecretHex({required Client that});

  Future<void> zoeClientClientClientClose({required Client that});

  Future<List<RelayConnectionInfo>> zoeClientClientClientGetRelayStatus({
    required Client that,
  });

  Future<GroupManager> zoeClientClientClientGroupManager({
    required Client that,
  });

  Future<bool> zoeClientClientClientHasConnectedRelays({required Client that});

  Future<bool> zoeClientClientClientHasFile({
    required Client that,
    required FileRef storedInfo,
  });

  Future<String> zoeClientClientClientIdHex({required Client that});

  Future<OverallConnectionStatus> zoeClientClientClientOverallStatus({
    required Client that,
  });

  Future<BigInt> zoeClientClientClientReconnectFailedRelays({
    required Client that,
  });

  Future<bool> zoeClientClientClientRemoveRelay({
    required Client that,
    required VerifyingKey serverPublicKey,
  });

  Future<void> zoeClientClientClientRetrieveFile({
    required Client that,
    required FileRef fileRef,
    required PathBuf outputPath,
  });

  Future<Uint8List> zoeClientClientClientRetrieveFileBytes({
    required Client that,
    required FileRef fileRef,
  });

  Future<ArcZoeClientSessionManager> zoeClientClientClientSessionManager({
    required Client that,
  });

  Future<FileRef> zoeClientClientClientStoreData({
    required Client that,
    required List<int> data,
    required String referenceName,
    String? contentType,
  });

  Future<FileRef> zoeClientClientClientStoreFile({
    required Client that,
    required PathBuf filePath,
  });

  Future<GroupManager> zoeStateMachineGroupGroupManagerBuilderBuild({
    required GroupManagerBuilder that,
  });

  Future<Map<MessageId, GroupSession>>
  zoeStateMachineGroupGroupManagerAllGroupSessions({
    required GroupManager that,
  });

  Future<Map<MessageId, GroupState>> zoeStateMachineGroupGroupManagerAllGroups({
    required GroupManager that,
  });

  Future<GroupManager> zoeStateMachineGroupGroupManagerDefault();

  Future<EncryptionKey> zoeStateMachineGroupGroupManagerGenerateGroupKey({
    required BigInt timestamp,
  });

  Future<GroupSession?> zoeStateMachineGroupGroupManagerGroupSession({
    required GroupManager that,
    required MessageId groupId,
  });

  Future<GroupState?> zoeStateMachineGroupGroupManagerGroupState({
    required GroupManager that,
    required MessageId groupId,
  });

  Future<bool> zoeStateMachineGroupGroupManagerIsMember({
    required GroupManager that,
    required MessageId groupId,
    required VerifyingKey user,
  });

  Future<GroupRole?> zoeStateMachineGroupGroupManagerMemberRole({
    required GroupManager that,
    required MessageId groupId,
    required VerifyingKey user,
  });

  EncryptionKey zoeStateMachineStateGroupSessionAutoAccessorGetCurrentKey({
    required GroupSession that,
  });

  List<EncryptionKey>
  zoeStateMachineStateGroupSessionAutoAccessorGetPreviousKeys({
    required GroupSession that,
  });

  GroupState zoeStateMachineStateGroupSessionAutoAccessorGetState({
    required GroupSession that,
  });

  void zoeStateMachineStateGroupSessionAutoAccessorSetCurrentKey({
    required GroupSession that,
    required EncryptionKey currentKey,
  });

  void zoeStateMachineStateGroupSessionAutoAccessorSetPreviousKeys({
    required GroupSession that,
    required List<EncryptionKey> previousKeys,
  });

  void zoeStateMachineStateGroupSessionAutoAccessorSetState({
    required GroupSession that,
    required GroupState state,
  });

  Future<Algorithm> zoeWireProtocolKeysKeyPairAlgorithm({
    required KeyPair that,
  });

  Future<KeyPair> zoeWireProtocolKeysKeyPairFromPem({
    required String pemString,
  });

  Future<KeyId> zoeWireProtocolKeysKeyPairId({required KeyPair that});

  Future<VerifyingKey> zoeWireProtocolKeysKeyPairPublicKey({
    required KeyPair that,
  });

  Future<Signature> zoeWireProtocolKeysKeyPairSign({
    required KeyPair that,
    required List<int> message,
  });

  Future<String> zoeWireProtocolKeysKeyPairToPem({required KeyPair that});

  RelayInfo zoeClientClientRelayConnectionInfoAutoAccessorGetInfo({
    required RelayConnectionInfo that,
  });

  RelayConnectionStatus
  zoeClientClientRelayConnectionInfoAutoAccessorGetStatus({
    required RelayConnectionInfo that,
  });

  void zoeClientClientRelayConnectionInfoAutoAccessorSetInfo({
    required RelayConnectionInfo that,
    required RelayInfo info,
  });

  void zoeClientClientRelayConnectionInfoAutoAccessorSetStatus({
    required RelayConnectionInfo that,
    required RelayConnectionStatus status,
  });

  RelayAddress zoeClientClientRelayInfoAutoAccessorGetRelayAddress({
    required RelayInfo that,
  });

  KeyId zoeClientClientRelayInfoAutoAccessorGetRelayId({
    required RelayInfo that,
  });

  void zoeClientClientRelayInfoAutoAccessorSetRelayAddress({
    required RelayInfo that,
    required RelayAddress relayAddress,
  });

  void zoeClientClientRelayInfoAutoAccessorSetRelayId({
    required RelayInfo that,
    required KeyId relayId,
  });

  RelayAddress zoeClientClientRelayStatusUpdateAutoAccessorGetRelayAddress({
    required RelayStatusUpdate that,
  });

  KeyId zoeClientClientRelayStatusUpdateAutoAccessorGetRelayId({
    required RelayStatusUpdate that,
  });

  RelayConnectionStatus zoeClientClientRelayStatusUpdateAutoAccessorGetStatus({
    required RelayStatusUpdate that,
  });

  void zoeClientClientRelayStatusUpdateAutoAccessorSetRelayAddress({
    required RelayStatusUpdate that,
    required RelayAddress relayAddress,
  });

  void zoeClientClientRelayStatusUpdateAutoAccessorSetRelayId({
    required RelayStatusUpdate that,
    required KeyId relayId,
  });

  void zoeClientClientRelayStatusUpdateAutoAccessorSetStatus({
    required RelayStatusUpdate that,
    required RelayConnectionStatus status,
  });

  Future<Uint8List> zoeWireProtocolKeysSignatureEncode({
    required Signature that,
  });

  Future<KeyId> zoeWireProtocolKeysSignatureId({required Signature that});

  Future<Signature> zoeWireProtocolKeysSigningKeySign({
    required SigningKey that,
    required List<int> message,
  });

  Future<Algorithm> zoeWireProtocolKeysVerifyingKeyAlgorithm({
    required VerifyingKey that,
  });

  Future<Uint8List> zoeWireProtocolKeysVerifyingKeyEncode({
    required VerifyingKey that,
  });

  Future<VerifyingKey> zoeWireProtocolKeysVerifyingKeyFromHex({
    required String hex,
  });

  Future<VerifyingKey> zoeWireProtocolKeysVerifyingKeyFromPem({
    required String pemString,
  });

  Future<KeyId> zoeWireProtocolKeysVerifyingKeyId({required VerifyingKey that});

  Future<Uint8List> zoeWireProtocolKeysVerifyingKeyToBytes({
    required VerifyingKey that,
  });

  Future<String> zoeWireProtocolKeysVerifyingKeyToPem({
    required VerifyingKey that,
  });

  Future<void> zoeWireProtocolKeysVerifyingKeyVerify({
    required VerifyingKey that,
    required List<int> message,
    required Signature signature,
  });

  Future<RelayAddress> zoeClientFrbApiCreateRelayAddressWithHostname({
    required String serverKeyHex,
    required String hostname,
  });

  Future<String> zoeClientFrbApiCreateSigningKeyRandom();

  Future<SocketAddr> zoeClientFrbApiCreateSocketAddr({
    required String ip,
    required int port,
  });

  Future<void> zoeClientFrbApiFrbInit();

  String crateApiSimpleGreet({required String name});

  Future<void> crateApiSimpleInitApp();

  Stream<OverallConnectionStatus> crateApiClientOverallStatusStream({
    required Client client,
  });

  Future<bool> zoeClientFrbApiPrepareClientForSystemsTest({
    required Client client,
    required String serverAddress,
    required String serverKeyHex,
  });

  Future<SocketAddr> zoeClientUtilResolveToSocketAddr({required String s});

  Stream<SystemCheckResults> crateApiSystemTestRunSystemTests({
    required Client client,
  });

  Future<String> zoeClientFrbApiSigningKeyFromHex({required String hex});

  Future<String> zoeClientFrbApiSigningKeyToVerifyingKey({
    required String signingKeyHex,
  });

  Future<String> zoeClientFrbApiSocketAddrIp({required SocketAddr addr});

  Future<int> zoeClientFrbApiSocketAddrPort({required SocketAddr addr});

  Future<String> zoeClientFrbApiSocketAddrToString({required SocketAddr addr});

  Future<bool> crateApiSystemTestSystemCheckResultsCategoryHasFailures({
    required SystemCheckResults results,
    required TestCategory category,
  });

  Future<int> crateApiSystemTestSystemCheckResultsFailedCount({
    required SystemCheckResults results,
  });

  Future<List<TestCategory>> crateApiSystemTestSystemCheckResultsGetCategories({
    required SystemCheckResults results,
  });

  Future<List<TestInfo>>
  crateApiSystemTestSystemCheckResultsGetTestsForCategory({
    required SystemCheckResults results,
    required TestCategory category,
  });

  Future<bool> crateApiSystemTestSystemCheckResultsIsSuccess({
    required SystemCheckResults results,
  });

  Future<int> crateApiSystemTestSystemCheckResultsPassedCount({
    required SystemCheckResults results,
  });

  Future<int> crateApiSystemTestSystemCheckResultsTotalCount({
    required SystemCheckResults results,
  });

  Future<BigInt> crateApiSystemTestSystemCheckResultsTotalDurationMs({
    required SystemCheckResults results,
  });

  Future<BigInt> crateApiSystemTestTestInfoDurationMs({required TestInfo test});

  Future<List<String>> crateApiSystemTestTestInfoGetDetails({
    required TestInfo test,
  });

  Future<String?> crateApiSystemTestTestInfoGetError({required TestInfo test});

  Future<String> crateApiSystemTestTestInfoGetName({required TestInfo test});

  Future<bool> crateApiSystemTestTestInfoIsFailed({required TestInfo test});

  Future<bool> crateApiSystemTestTestInfoIsPassed({required TestInfo test});

  Future<VerifyingKey> zoeClientFrbApiVerifyingKeyFromHex({
    required String hex,
  });

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcZoeClientSessionManager;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcZoeClientSessionManager;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ArcZoeClientSessionManagerPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_Client;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_Client;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ClientBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ClientBuilder;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_ClientBuilderPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ClientSecret;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ClientSecret;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_ClientSecretPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EncryptionKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EncryptionKey;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_EncryptionKeyPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_FileRef;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_FileRef;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_FileRefPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupManager;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupManager;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GroupManagerPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupManagerBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupManagerBuilder;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_GroupManagerBuilderPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupRole;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupRole;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GroupRolePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupSession;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupSession;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GroupSessionPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupState;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_GroupStatePtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_KeyId;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_KeyId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeyIdPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_KeyPair;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_KeyPair;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeyPairPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_KeyPairError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_KeyPairError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeyPairErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MessageId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MessageId;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_MessageIdPtr;

  RustArcIncrementStrongCountFnType get rust_arc_increment_strong_count_PathBuf;

  RustArcDecrementStrongCountFnType get rust_arc_decrement_strong_count_PathBuf;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_PathBufPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayAddress;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayAddress;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RelayAddressPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayConnectionInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayConnectionInfo;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_RelayConnectionInfoPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayConnectionStatus;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayConnectionStatus;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_RelayConnectionStatusPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayInfo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_RelayInfoPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayStatusUpdate;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayStatusUpdate;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_RelayStatusUpdatePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Signature;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Signature;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SignaturePtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SigningKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SigningKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SigningKeyPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SocketAddr;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SocketAddr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_SocketAddrPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SystemCheckResults;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SystemCheckResults;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_SystemCheckResultsPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_TestInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_TestInfo;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_TestInfoPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VerifyError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VerifyError;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VerifyErrorPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VerifyingKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VerifyingKey;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_VerifyingKeyPtr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VerifyingKeyError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VerifyingKeyError;

  CrossPlatformFinalizerArg
  get rust_arc_decrement_strong_count_VerifyingKeyErrorPtr;
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<void> zoeClientClientClientBuilderAutoconnect({
    required ClientBuilder that,
    required bool autoconnect,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that,
            serializer,
          );
          sse_encode_bool(autoconnect, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 1,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientBuilderAutoconnectConstMeta,
        argValues: [that, autoconnect],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderAutoconnectConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_autoconnect",
        argNames: ["that", "autoconnect"],
      );

  @override
  Future<Client> zoeClientClientClientBuilderBuild({
    required ClientBuilder that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 2,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientBuilderBuildConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderBuildConstMeta =>
      const TaskConstMeta(debugName: "ClientBuilder_build", argNames: ["that"]);

  @override
  Future<void> zoeClientClientClientBuilderClientSecret({
    required ClientBuilder that,
    required ClientSecret secret,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
            secret,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientBuilderClientSecretConstMeta,
        argValues: [that, secret],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderClientSecretConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_client_secret",
        argNames: ["that", "secret"],
      );

  @override
  Future<void> zoeClientClientClientBuilderDbStorageDir({
    required ClientBuilder that,
    required String path,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that,
            serializer,
          );
          sse_encode_String(path, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 4,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientBuilderDbStorageDirConstMeta,
        argValues: [that, path],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderDbStorageDirConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_db_storage_dir",
        argNames: ["that", "path"],
      );

  @override
  Future<ClientBuilder> zoeClientClientClientBuilderDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 5,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientBuilderDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderDefaultConstMeta =>
      const TaskConstMeta(debugName: "ClientBuilder_default", argNames: []);

  @override
  Future<void> zoeClientClientClientBuilderEncryptionKey({
    required ClientBuilder that,
    required U8Array32 key,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that,
            serializer,
          );
          sse_encode_u_8_array_32(key, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 6,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientBuilderEncryptionKeyConstMeta,
        argValues: [that, key],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderEncryptionKeyConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_encryption_key",
        argNames: ["that", "key"],
      );

  @override
  Future<void> zoeClientClientClientBuilderMediaStorageDir({
    required ClientBuilder that,
    required String mediaStorageDir,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that,
            serializer,
          );
          sse_encode_String(mediaStorageDir, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 7,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientBuilderMediaStorageDirConstMeta,
        argValues: [that, mediaStorageDir],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderMediaStorageDirConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_media_storage_dir",
        argNames: ["that", "mediaStorageDir"],
      );

  @override
  Future<void> zoeClientClientClientBuilderServerInfo({
    required ClientBuilder that,
    required VerifyingKey serverPublicKey,
    required SocketAddr serverAddr,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            serverPublicKey,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
            serverAddr,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 8,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientBuilderServerInfoConstMeta,
        argValues: [that, serverPublicKey, serverAddr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderServerInfoConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_server_info",
        argNames: ["that", "serverPublicKey", "serverAddr"],
      );

  @override
  Future<void> zoeClientClientClientBuilderServers({
    required ClientBuilder that,
    required List<RelayAddress> servers,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
            that,
            serializer,
          );
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
            servers,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 9,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientBuilderServersConstMeta,
        argValues: [that, servers],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderServersConstMeta =>
      const TaskConstMeta(
        debugName: "ClientBuilder_servers",
        argNames: ["that", "servers"],
      );

  @override
  Future<ClientSecret> zoeClientClientClientSecretFromHex({
    required String hex,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(hex, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 10,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientSecretFromHexConstMeta,
        argValues: [hex],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientSecretFromHexConstMeta =>
      const TaskConstMeta(
        debugName: "ClientSecret_from_hex",
        argNames: ["hex"],
      );

  @override
  Future<void> zoeClientClientClientSecretServers({
    required ClientSecret that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 11,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientSecretServersConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientSecretServersConstMeta =>
      const TaskConstMeta(
        debugName: "ClientSecret_servers",
        argNames: ["that"],
      );

  @override
  Future<String> zoeClientClientClientSecretToHex({
    required ClientSecret that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 12,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientSecretToHexConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientSecretToHexConstMeta =>
      const TaskConstMeta(debugName: "ClientSecret_to_hex", argNames: ["that"]);

  @override
  Future<void> zoeClientClientClientAddRelay({
    required Client that,
    required RelayAddress address,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
            address,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 13,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientAddRelayConstMeta,
        argValues: [that, address],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientAddRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_add_relay",
        argNames: ["that", "address"],
      );

  @override
  Future<ClientBuilder> zoeClientClientClientBuilder() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 14,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientBuilderConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientBuilderConstMeta =>
      const TaskConstMeta(debugName: "Client_builder", argNames: []);

  @override
  Future<ClientSecret> zoeClientClientClientClientSecret({
    required Client that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 15,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientClientSecretConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientClientSecretConstMeta =>
      const TaskConstMeta(
        debugName: "Client_client_secret",
        argNames: ["that"],
      );

  @override
  Future<String> zoeClientClientClientClientSecretHex({required Client that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 16,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientClientSecretHexConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientClientSecretHexConstMeta =>
      const TaskConstMeta(
        debugName: "Client_client_secret_hex",
        argNames: ["that"],
      );

  @override
  Future<void> zoeClientClientClientClose({required Client that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 17,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientCloseConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientCloseConstMeta =>
      const TaskConstMeta(debugName: "Client_close", argNames: ["that"]);

  @override
  Future<List<RelayConnectionInfo>> zoeClientClientClientGetRelayStatus({
    required Client that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 18,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientGetRelayStatusConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientGetRelayStatusConstMeta =>
      const TaskConstMeta(
        debugName: "Client_get_relay_status",
        argNames: ["that"],
      );

  @override
  Future<GroupManager> zoeClientClientClientGroupManager({
    required Client that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 19,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientGroupManagerConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientGroupManagerConstMeta =>
      const TaskConstMeta(
        debugName: "Client_group_manager",
        argNames: ["that"],
      );

  @override
  Future<bool> zoeClientClientClientHasConnectedRelays({required Client that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 20,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientHasConnectedRelaysConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientHasConnectedRelaysConstMeta =>
      const TaskConstMeta(
        debugName: "Client_has_connected_relays",
        argNames: ["that"],
      );

  @override
  Future<bool> zoeClientClientClientHasFile({
    required Client that,
    required FileRef storedInfo,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
            storedInfo,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 21,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientHasFileConstMeta,
        argValues: [that, storedInfo],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientHasFileConstMeta =>
      const TaskConstMeta(
        debugName: "Client_has_file",
        argNames: ["that", "storedInfo"],
      );

  @override
  Future<String> zoeClientClientClientIdHex({required Client that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 22,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientIdHexConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientIdHexConstMeta =>
      const TaskConstMeta(debugName: "Client_id_hex", argNames: ["that"]);

  @override
  Future<OverallConnectionStatus> zoeClientClientClientOverallStatus({
    required Client that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 23,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_overall_connection_status,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientOverallStatusConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientOverallStatusConstMeta =>
      const TaskConstMeta(
        debugName: "Client_overall_status",
        argNames: ["that"],
      );

  @override
  Future<BigInt> zoeClientClientClientReconnectFailedRelays({
    required Client that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 24,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_usize,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientReconnectFailedRelaysConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientReconnectFailedRelaysConstMeta =>
      const TaskConstMeta(
        debugName: "Client_reconnect_failed_relays",
        argNames: ["that"],
      );

  @override
  Future<bool> zoeClientClientClientRemoveRelay({
    required Client that,
    required VerifyingKey serverPublicKey,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            serverPublicKey,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 25,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientRemoveRelayConstMeta,
        argValues: [that, serverPublicKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientRemoveRelayConstMeta =>
      const TaskConstMeta(
        debugName: "Client_remove_relay",
        argNames: ["that", "serverPublicKey"],
      );

  @override
  Future<void> zoeClientClientClientRetrieveFile({
    required Client that,
    required FileRef fileRef,
    required PathBuf outputPath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
            fileRef,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            outputPath,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 26,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientRetrieveFileConstMeta,
        argValues: [that, fileRef, outputPath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientRetrieveFileConstMeta =>
      const TaskConstMeta(
        debugName: "Client_retrieve_file",
        argNames: ["that", "fileRef", "outputPath"],
      );

  @override
  Future<Uint8List> zoeClientClientClientRetrieveFileBytes({
    required Client that,
    required FileRef fileRef,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
            fileRef,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 27,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientRetrieveFileBytesConstMeta,
        argValues: [that, fileRef],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientRetrieveFileBytesConstMeta =>
      const TaskConstMeta(
        debugName: "Client_retrieve_file_bytes",
        argNames: ["that", "fileRef"],
      );

  @override
  Future<ArcZoeClientSessionManager> zoeClientClientClientSessionManager({
    required Client that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 28,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcZoeClientSessionManager,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientClientSessionManagerConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientSessionManagerConstMeta =>
      const TaskConstMeta(
        debugName: "Client_session_manager",
        argNames: ["that"],
      );

  @override
  Future<FileRef> zoeClientClientClientStoreData({
    required Client that,
    required List<int> data,
    required String referenceName,
    String? contentType,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          sse_encode_list_prim_u_8_loose(data, serializer);
          sse_encode_String(referenceName, serializer);
          sse_encode_opt_String(contentType, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 29,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientStoreDataConstMeta,
        argValues: [that, data, referenceName, contentType],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientStoreDataConstMeta =>
      const TaskConstMeta(
        debugName: "Client_store_data",
        argNames: ["that", "data", "referenceName", "contentType"],
      );

  @override
  Future<FileRef> zoeClientClientClientStoreFile({
    required Client that,
    required PathBuf filePath,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
            filePath,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 30,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeClientClientClientStoreFileConstMeta,
        argValues: [that, filePath],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientClientStoreFileConstMeta =>
      const TaskConstMeta(
        debugName: "Client_store_file",
        argNames: ["that", "filePath"],
      );

  @override
  Future<GroupManager> zoeStateMachineGroupGroupManagerBuilderBuild({
    required GroupManagerBuilder that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManagerBuilder(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 31,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager,
          decodeErrorData: null,
        ),
        constMeta: kZoeStateMachineGroupGroupManagerBuilderBuildConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeStateMachineGroupGroupManagerBuilderBuildConstMeta =>
      const TaskConstMeta(
        debugName: "GroupManagerBuilder_build",
        argNames: ["that"],
      );

  @override
  Future<Map<MessageId, GroupSession>>
  zoeStateMachineGroupGroupManagerAllGroupSessions({
    required GroupManager that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 32,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession_None,
          decodeErrorData: null,
        ),
        constMeta: kZoeStateMachineGroupGroupManagerAllGroupSessionsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeStateMachineGroupGroupManagerAllGroupSessionsConstMeta =>
      const TaskConstMeta(
        debugName: "GroupManager_all_group_sessions",
        argNames: ["that"],
      );

  @override
  Future<Map<MessageId, GroupState>> zoeStateMachineGroupGroupManagerAllGroups({
    required GroupManager that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 33,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState_None,
          decodeErrorData: null,
        ),
        constMeta: kZoeStateMachineGroupGroupManagerAllGroupsConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeStateMachineGroupGroupManagerAllGroupsConstMeta =>
      const TaskConstMeta(
        debugName: "GroupManager_all_groups",
        argNames: ["that"],
      );

  @override
  Future<GroupManager> zoeStateMachineGroupGroupManagerDefault() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 34,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager,
          decodeErrorData: null,
        ),
        constMeta: kZoeStateMachineGroupGroupManagerDefaultConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeStateMachineGroupGroupManagerDefaultConstMeta =>
      const TaskConstMeta(debugName: "GroupManager_default", argNames: []);

  @override
  Future<EncryptionKey> zoeStateMachineGroupGroupManagerGenerateGroupKey({
    required BigInt timestamp,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_u_64(timestamp, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 35,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey,
          decodeErrorData: null,
        ),
        constMeta: kZoeStateMachineGroupGroupManagerGenerateGroupKeyConstMeta,
        argValues: [timestamp],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeStateMachineGroupGroupManagerGenerateGroupKeyConstMeta =>
      const TaskConstMeta(
        debugName: "GroupManager_generate_group_key",
        argNames: ["timestamp"],
      );

  @override
  Future<GroupSession?> zoeStateMachineGroupGroupManagerGroupSession({
    required GroupManager that,
    required MessageId groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
            groupId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 36,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession,
          decodeErrorData: null,
        ),
        constMeta: kZoeStateMachineGroupGroupManagerGroupSessionConstMeta,
        argValues: [that, groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeStateMachineGroupGroupManagerGroupSessionConstMeta =>
      const TaskConstMeta(
        debugName: "GroupManager_group_session",
        argNames: ["that", "groupId"],
      );

  @override
  Future<GroupState?> zoeStateMachineGroupGroupManagerGroupState({
    required GroupManager that,
    required MessageId groupId,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
            groupId,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 37,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState,
          decodeErrorData: null,
        ),
        constMeta: kZoeStateMachineGroupGroupManagerGroupStateConstMeta,
        argValues: [that, groupId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeStateMachineGroupGroupManagerGroupStateConstMeta =>
      const TaskConstMeta(
        debugName: "GroupManager_group_state",
        argNames: ["that", "groupId"],
      );

  @override
  Future<bool> zoeStateMachineGroupGroupManagerIsMember({
    required GroupManager that,
    required MessageId groupId,
    required VerifyingKey user,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
            groupId,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            user,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 38,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kZoeStateMachineGroupGroupManagerIsMemberConstMeta,
        argValues: [that, groupId, user],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeStateMachineGroupGroupManagerIsMemberConstMeta =>
      const TaskConstMeta(
        debugName: "GroupManager_is_member",
        argNames: ["that", "groupId", "user"],
      );

  @override
  Future<GroupRole?> zoeStateMachineGroupGroupManagerMemberRole({
    required GroupManager that,
    required MessageId groupId,
    required VerifyingKey user,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
            that,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
            groupId,
            serializer,
          );
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            user,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 39,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole,
          decodeErrorData: null,
        ),
        constMeta: kZoeStateMachineGroupGroupManagerMemberRoleConstMeta,
        argValues: [that, groupId, user],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeStateMachineGroupGroupManagerMemberRoleConstMeta =>
      const TaskConstMeta(
        debugName: "GroupManager_member_role",
        argNames: ["that", "groupId", "user"],
      );

  @override
  EncryptionKey zoeStateMachineStateGroupSessionAutoAccessorGetCurrentKey({
    required GroupSession that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 40)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeStateMachineStateGroupSessionAutoAccessorGetCurrentKeyConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeStateMachineStateGroupSessionAutoAccessorGetCurrentKeyConstMeta =>
      const TaskConstMeta(
        debugName: "GroupSession_auto_accessor_get_current_key",
        argNames: ["that"],
      );

  @override
  List<EncryptionKey>
  zoeStateMachineStateGroupSessionAutoAccessorGetPreviousKeys({
    required GroupSession that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 41)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeStateMachineStateGroupSessionAutoAccessorGetPreviousKeysConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeStateMachineStateGroupSessionAutoAccessorGetPreviousKeysConstMeta =>
      const TaskConstMeta(
        debugName: "GroupSession_auto_accessor_get_previous_keys",
        argNames: ["that"],
      );

  @override
  GroupState zoeStateMachineStateGroupSessionAutoAccessorGetState({
    required GroupSession that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 42)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeStateMachineStateGroupSessionAutoAccessorGetStateConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeStateMachineStateGroupSessionAutoAccessorGetStateConstMeta =>
      const TaskConstMeta(
        debugName: "GroupSession_auto_accessor_get_state",
        argNames: ["that"],
      );

  @override
  void zoeStateMachineStateGroupSessionAutoAccessorSetCurrentKey({
    required GroupSession that,
    required EncryptionKey currentKey,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
            currentKey,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 43)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeStateMachineStateGroupSessionAutoAccessorSetCurrentKeyConstMeta,
        argValues: [that, currentKey],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeStateMachineStateGroupSessionAutoAccessorSetCurrentKeyConstMeta =>
      const TaskConstMeta(
        debugName: "GroupSession_auto_accessor_set_current_key",
        argNames: ["that", "currentKey"],
      );

  @override
  void zoeStateMachineStateGroupSessionAutoAccessorSetPreviousKeys({
    required GroupSession that,
    required List<EncryptionKey> previousKeys,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
            that,
            serializer,
          );
          sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
            previousKeys,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 44)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeStateMachineStateGroupSessionAutoAccessorSetPreviousKeysConstMeta,
        argValues: [that, previousKeys],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeStateMachineStateGroupSessionAutoAccessorSetPreviousKeysConstMeta =>
      const TaskConstMeta(
        debugName: "GroupSession_auto_accessor_set_previous_keys",
        argNames: ["that", "previousKeys"],
      );

  @override
  void zoeStateMachineStateGroupSessionAutoAccessorSetState({
    required GroupSession that,
    required GroupState state,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
            state,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 45)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeStateMachineStateGroupSessionAutoAccessorSetStateConstMeta,
        argValues: [that, state],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeStateMachineStateGroupSessionAutoAccessorSetStateConstMeta =>
      const TaskConstMeta(
        debugName: "GroupSession_auto_accessor_set_state",
        argNames: ["that", "state"],
      );

  @override
  Future<Algorithm> zoeWireProtocolKeysKeyPairAlgorithm({
    required KeyPair that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 46,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_algorithm,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysKeyPairAlgorithmConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysKeyPairAlgorithmConstMeta =>
      const TaskConstMeta(debugName: "KeyPair_algorithm", argNames: ["that"]);

  @override
  Future<KeyPair> zoeWireProtocolKeysKeyPairFromPem({
    required String pemString,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pemString, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 47,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError,
        ),
        constMeta: kZoeWireProtocolKeysKeyPairFromPemConstMeta,
        argValues: [pemString],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysKeyPairFromPemConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPair_from_pem",
        argNames: ["pemString"],
      );

  @override
  Future<KeyId> zoeWireProtocolKeysKeyPairId({required KeyPair that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 48,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysKeyPairIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysKeyPairIdConstMeta =>
      const TaskConstMeta(debugName: "KeyPair_id", argNames: ["that"]);

  @override
  Future<VerifyingKey> zoeWireProtocolKeysKeyPairPublicKey({
    required KeyPair that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 49,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysKeyPairPublicKeyConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysKeyPairPublicKeyConstMeta =>
      const TaskConstMeta(debugName: "KeyPair_public_key", argNames: ["that"]);

  @override
  Future<Signature> zoeWireProtocolKeysKeyPairSign({
    required KeyPair that,
    required List<int> message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
            that,
            serializer,
          );
          sse_encode_list_prim_u_8_loose(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 50,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysKeyPairSignConstMeta,
        argValues: [that, message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysKeyPairSignConstMeta =>
      const TaskConstMeta(
        debugName: "KeyPair_sign",
        argNames: ["that", "message"],
      );

  @override
  Future<String> zoeWireProtocolKeysKeyPairToPem({required KeyPair that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 51,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError,
        ),
        constMeta: kZoeWireProtocolKeysKeyPairToPemConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysKeyPairToPemConstMeta =>
      const TaskConstMeta(debugName: "KeyPair_to_pem", argNames: ["that"]);

  @override
  RelayInfo zoeClientClientRelayConnectionInfoAutoAccessorGetInfo({
    required RelayConnectionInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 52)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayConnectionInfoAutoAccessorGetInfoConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayConnectionInfoAutoAccessorGetInfoConstMeta =>
      const TaskConstMeta(
        debugName: "RelayConnectionInfo_auto_accessor_get_info",
        argNames: ["that"],
      );

  @override
  RelayConnectionStatus
  zoeClientClientRelayConnectionInfoAutoAccessorGetStatus({
    required RelayConnectionInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 53)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayConnectionInfoAutoAccessorGetStatusConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayConnectionInfoAutoAccessorGetStatusConstMeta =>
      const TaskConstMeta(
        debugName: "RelayConnectionInfo_auto_accessor_get_status",
        argNames: ["that"],
      );

  @override
  void zoeClientClientRelayConnectionInfoAutoAccessorSetInfo({
    required RelayConnectionInfo that,
    required RelayInfo info,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
            info,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 54)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayConnectionInfoAutoAccessorSetInfoConstMeta,
        argValues: [that, info],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayConnectionInfoAutoAccessorSetInfoConstMeta =>
      const TaskConstMeta(
        debugName: "RelayConnectionInfo_auto_accessor_set_info",
        argNames: ["that", "info"],
      );

  @override
  void zoeClientClientRelayConnectionInfoAutoAccessorSetStatus({
    required RelayConnectionInfo that,
    required RelayConnectionStatus status,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus(
            status,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 55)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayConnectionInfoAutoAccessorSetStatusConstMeta,
        argValues: [that, status],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayConnectionInfoAutoAccessorSetStatusConstMeta =>
      const TaskConstMeta(
        debugName: "RelayConnectionInfo_auto_accessor_set_status",
        argNames: ["that", "status"],
      );

  @override
  RelayAddress zoeClientClientRelayInfoAutoAccessorGetRelayAddress({
    required RelayInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 56)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayInfoAutoAccessorGetRelayAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayInfoAutoAccessorGetRelayAddressConstMeta =>
      const TaskConstMeta(
        debugName: "RelayInfo_auto_accessor_get_relay_address",
        argNames: ["that"],
      );

  @override
  KeyId zoeClientClientRelayInfoAutoAccessorGetRelayId({
    required RelayInfo that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 57)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientRelayInfoAutoAccessorGetRelayIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientRelayInfoAutoAccessorGetRelayIdConstMeta =>
      const TaskConstMeta(
        debugName: "RelayInfo_auto_accessor_get_relay_id",
        argNames: ["that"],
      );

  @override
  void zoeClientClientRelayInfoAutoAccessorSetRelayAddress({
    required RelayInfo that,
    required RelayAddress relayAddress,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
            relayAddress,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 58)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayInfoAutoAccessorSetRelayAddressConstMeta,
        argValues: [that, relayAddress],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayInfoAutoAccessorSetRelayAddressConstMeta =>
      const TaskConstMeta(
        debugName: "RelayInfo_auto_accessor_set_relay_address",
        argNames: ["that", "relayAddress"],
      );

  @override
  void zoeClientClientRelayInfoAutoAccessorSetRelayId({
    required RelayInfo that,
    required KeyId relayId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId(
            relayId,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 59)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientClientRelayInfoAutoAccessorSetRelayIdConstMeta,
        argValues: [that, relayId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientClientRelayInfoAutoAccessorSetRelayIdConstMeta =>
      const TaskConstMeta(
        debugName: "RelayInfo_auto_accessor_set_relay_id",
        argNames: ["that", "relayId"],
      );

  @override
  RelayAddress zoeClientClientRelayStatusUpdateAutoAccessorGetRelayAddress({
    required RelayStatusUpdate that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 60)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayStatusUpdateAutoAccessorGetRelayAddressConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayStatusUpdateAutoAccessorGetRelayAddressConstMeta =>
      const TaskConstMeta(
        debugName: "RelayStatusUpdate_auto_accessor_get_relay_address",
        argNames: ["that"],
      );

  @override
  KeyId zoeClientClientRelayStatusUpdateAutoAccessorGetRelayId({
    required RelayStatusUpdate that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 61)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayStatusUpdateAutoAccessorGetRelayIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayStatusUpdateAutoAccessorGetRelayIdConstMeta =>
      const TaskConstMeta(
        debugName: "RelayStatusUpdate_auto_accessor_get_relay_id",
        argNames: ["that"],
      );

  @override
  RelayConnectionStatus zoeClientClientRelayStatusUpdateAutoAccessorGetStatus({
    required RelayStatusUpdate that,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
            that,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 62)!;
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayStatusUpdateAutoAccessorGetStatusConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayStatusUpdateAutoAccessorGetStatusConstMeta =>
      const TaskConstMeta(
        debugName: "RelayStatusUpdate_auto_accessor_get_status",
        argNames: ["that"],
      );

  @override
  void zoeClientClientRelayStatusUpdateAutoAccessorSetRelayAddress({
    required RelayStatusUpdate that,
    required RelayAddress relayAddress,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
            relayAddress,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 63)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayStatusUpdateAutoAccessorSetRelayAddressConstMeta,
        argValues: [that, relayAddress],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayStatusUpdateAutoAccessorSetRelayAddressConstMeta =>
      const TaskConstMeta(
        debugName: "RelayStatusUpdate_auto_accessor_set_relay_address",
        argNames: ["that", "relayAddress"],
      );

  @override
  void zoeClientClientRelayStatusUpdateAutoAccessorSetRelayId({
    required RelayStatusUpdate that,
    required KeyId relayId,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId(
            relayId,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 64)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayStatusUpdateAutoAccessorSetRelayIdConstMeta,
        argValues: [that, relayId],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayStatusUpdateAutoAccessorSetRelayIdConstMeta =>
      const TaskConstMeta(
        debugName: "RelayStatusUpdate_auto_accessor_set_relay_id",
        argNames: ["that", "relayId"],
      );

  @override
  void zoeClientClientRelayStatusUpdateAutoAccessorSetStatus({
    required RelayStatusUpdate that,
    required RelayConnectionStatus status,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
            that,
            serializer,
          );
          sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus(
            status,
            serializer,
          );
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 65)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta:
            kZoeClientClientRelayStatusUpdateAutoAccessorSetStatusConstMeta,
        argValues: [that, status],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kZoeClientClientRelayStatusUpdateAutoAccessorSetStatusConstMeta =>
      const TaskConstMeta(
        debugName: "RelayStatusUpdate_auto_accessor_set_status",
        argNames: ["that", "status"],
      );

  @override
  Future<Uint8List> zoeWireProtocolKeysSignatureEncode({
    required Signature that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 66,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysSignatureEncodeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysSignatureEncodeConstMeta =>
      const TaskConstMeta(debugName: "Signature_encode", argNames: ["that"]);

  @override
  Future<KeyId> zoeWireProtocolKeysSignatureId({required Signature that}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 67,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysSignatureIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysSignatureIdConstMeta =>
      const TaskConstMeta(debugName: "Signature_id", argNames: ["that"]);

  @override
  Future<Signature> zoeWireProtocolKeysSigningKeySign({
    required SigningKey that,
    required List<int> message,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
            that,
            serializer,
          );
          sse_encode_list_prim_u_8_loose(message, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 68,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysSigningKeySignConstMeta,
        argValues: [that, message],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysSigningKeySignConstMeta =>
      const TaskConstMeta(
        debugName: "SigningKey_sign",
        argNames: ["that", "message"],
      );

  @override
  Future<Algorithm> zoeWireProtocolKeysVerifyingKeyAlgorithm({
    required VerifyingKey that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 69,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_algorithm,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysVerifyingKeyAlgorithmConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysVerifyingKeyAlgorithmConstMeta =>
      const TaskConstMeta(
        debugName: "VerifyingKey_algorithm",
        argNames: ["that"],
      );

  @override
  Future<Uint8List> zoeWireProtocolKeysVerifyingKeyEncode({
    required VerifyingKey that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 70,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysVerifyingKeyEncodeConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysVerifyingKeyEncodeConstMeta =>
      const TaskConstMeta(debugName: "VerifyingKey_encode", argNames: ["that"]);

  @override
  Future<VerifyingKey> zoeWireProtocolKeysVerifyingKeyFromHex({
    required String hex,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(hex, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 71,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kZoeWireProtocolKeysVerifyingKeyFromHexConstMeta,
        argValues: [hex],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysVerifyingKeyFromHexConstMeta =>
      const TaskConstMeta(
        debugName: "VerifyingKey_from_hex",
        argNames: ["hex"],
      );

  @override
  Future<VerifyingKey> zoeWireProtocolKeysVerifyingKeyFromPem({
    required String pemString,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(pemString, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 72,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError,
        ),
        constMeta: kZoeWireProtocolKeysVerifyingKeyFromPemConstMeta,
        argValues: [pemString],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysVerifyingKeyFromPemConstMeta =>
      const TaskConstMeta(
        debugName: "VerifyingKey_from_pem",
        argNames: ["pemString"],
      );

  @override
  Future<KeyId> zoeWireProtocolKeysVerifyingKeyId({
    required VerifyingKey that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 73,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId,
          decodeErrorData: null,
        ),
        constMeta: kZoeWireProtocolKeysVerifyingKeyIdConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysVerifyingKeyIdConstMeta =>
      const TaskConstMeta(debugName: "VerifyingKey_id", argNames: ["that"]);

  @override
  Future<Uint8List> zoeWireProtocolKeysVerifyingKeyToBytes({
    required VerifyingKey that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 74,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_prim_u_8_strict,
          decodeErrorData: sse_decode_AnyhowException,
        ),
        constMeta: kZoeWireProtocolKeysVerifyingKeyToBytesConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysVerifyingKeyToBytesConstMeta =>
      const TaskConstMeta(
        debugName: "VerifyingKey_to_bytes",
        argNames: ["that"],
      );

  @override
  Future<String> zoeWireProtocolKeysVerifyingKeyToPem({
    required VerifyingKey that,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            that,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 75,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError,
        ),
        constMeta: kZoeWireProtocolKeysVerifyingKeyToPemConstMeta,
        argValues: [that],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysVerifyingKeyToPemConstMeta =>
      const TaskConstMeta(debugName: "VerifyingKey_to_pem", argNames: ["that"]);

  @override
  Future<void> zoeWireProtocolKeysVerifyingKeyVerify({
    required VerifyingKey that,
    required List<int> message,
    required Signature signature,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
            that,
            serializer,
          );
          sse_encode_list_prim_u_8_loose(message, serializer);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
            signature,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 76,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyError,
        ),
        constMeta: kZoeWireProtocolKeysVerifyingKeyVerifyConstMeta,
        argValues: [that, message, signature],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeWireProtocolKeysVerifyingKeyVerifyConstMeta =>
      const TaskConstMeta(
        debugName: "VerifyingKey_verify",
        argNames: ["that", "message", "signature"],
      );

  @override
  Future<RelayAddress> zoeClientFrbApiCreateRelayAddressWithHostname({
    required String serverKeyHex,
    required String hostname,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(serverKeyHex, serializer);
          sse_encode_String(hostname, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 77,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kZoeClientFrbApiCreateRelayAddressWithHostnameConstMeta,
        argValues: [serverKeyHex, hostname],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiCreateRelayAddressWithHostnameConstMeta =>
      const TaskConstMeta(
        debugName: "create_relay_address_with_hostname",
        argNames: ["serverKeyHex", "hostname"],
      );

  @override
  Future<String> zoeClientFrbApiCreateSigningKeyRandom() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 78,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientFrbApiCreateSigningKeyRandomConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiCreateSigningKeyRandomConstMeta =>
      const TaskConstMeta(debugName: "create_signing_key_random", argNames: []);

  @override
  Future<SocketAddr> zoeClientFrbApiCreateSocketAddr({
    required String ip,
    required int port,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(ip, serializer);
          sse_encode_u_16(port, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 79,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kZoeClientFrbApiCreateSocketAddrConstMeta,
        argValues: [ip, port],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiCreateSocketAddrConstMeta =>
      const TaskConstMeta(
        debugName: "create_socket_addr",
        argNames: ["ip", "port"],
      );

  @override
  Future<void> zoeClientFrbApiFrbInit() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 80,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientFrbApiFrbInitConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiFrbInitConstMeta =>
      const TaskConstMeta(debugName: "frb_init", argNames: []);

  @override
  String crateApiSimpleGreet({required String name}) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(name, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 81)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGreetConstMeta,
        argValues: [name],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGreetConstMeta =>
      const TaskConstMeta(debugName: "greet", argNames: ["name"]);

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 82,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @override
  Stream<OverallConnectionStatus> crateApiClientOverallStatusStream({
    required Client client,
  }) {
    final sink = RustStreamSink<OverallConnectionStatus>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
              client,
              serializer,
            );
            sse_encode_StreamSink_overall_connection_status_Sse(
              sink,
              serializer,
            );
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 83,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiClientOverallStatusStreamConstMeta,
          argValues: [client, sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiClientOverallStatusStreamConstMeta =>
      const TaskConstMeta(
        debugName: "overall_status_stream",
        argNames: ["client", "sink"],
      );

  @override
  Future<bool> zoeClientFrbApiPrepareClientForSystemsTest({
    required Client client,
    required String serverAddress,
    required String serverKeyHex,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
            client,
            serializer,
          );
          sse_encode_String(serverAddress, serializer);
          sse_encode_String(serverKeyHex, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 84,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kZoeClientFrbApiPrepareClientForSystemsTestConstMeta,
        argValues: [client, serverAddress, serverKeyHex],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiPrepareClientForSystemsTestConstMeta =>
      const TaskConstMeta(
        debugName: "prepare_client_for_systems_test",
        argNames: ["client", "serverAddress", "serverKeyHex"],
      );

  @override
  Future<SocketAddr> zoeClientUtilResolveToSocketAddr({required String s}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(s, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 85,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kZoeClientUtilResolveToSocketAddrConstMeta,
        argValues: [s],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientUtilResolveToSocketAddrConstMeta =>
      const TaskConstMeta(debugName: "resolve_to_socket_addr", argNames: ["s"]);

  @override
  Stream<SystemCheckResults> crateApiSystemTestRunSystemTests({
    required Client client,
  }) {
    final sink = RustStreamSink<SystemCheckResults>();
    unawaited(
      handler.executeNormal(
        NormalTask(
          callFfi: (port_) {
            final serializer = SseSerializer(generalizedFrbRustBinding);
            sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
              client,
              serializer,
            );
            sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults_Sse(
              sink,
              serializer,
            );
            pdeCallFfi(
              generalizedFrbRustBinding,
              serializer,
              funcId: 86,
              port: port_,
            );
          },
          codec: SseCodec(
            decodeSuccessData: sse_decode_unit,
            decodeErrorData: null,
          ),
          constMeta: kCrateApiSystemTestRunSystemTestsConstMeta,
          argValues: [client, sink],
          apiImpl: this,
        ),
      ),
    );
    return sink.stream;
  }

  TaskConstMeta get kCrateApiSystemTestRunSystemTestsConstMeta =>
      const TaskConstMeta(
        debugName: "run_system_tests",
        argNames: ["client", "sink"],
      );

  @override
  Future<String> zoeClientFrbApiSigningKeyFromHex({required String hex}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(hex, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 87,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kZoeClientFrbApiSigningKeyFromHexConstMeta,
        argValues: [hex],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiSigningKeyFromHexConstMeta =>
      const TaskConstMeta(debugName: "signing_key_from_hex", argNames: ["hex"]);

  @override
  Future<String> zoeClientFrbApiSigningKeyToVerifyingKey({
    required String signingKeyHex,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(signingKeyHex, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 88,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kZoeClientFrbApiSigningKeyToVerifyingKeyConstMeta,
        argValues: [signingKeyHex],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiSigningKeyToVerifyingKeyConstMeta =>
      const TaskConstMeta(
        debugName: "signing_key_to_verifying_key",
        argNames: ["signingKeyHex"],
      );

  @override
  Future<String> zoeClientFrbApiSocketAddrIp({required SocketAddr addr}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
            addr,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 89,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientFrbApiSocketAddrIpConstMeta,
        argValues: [addr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiSocketAddrIpConstMeta =>
      const TaskConstMeta(debugName: "socket_addr_ip", argNames: ["addr"]);

  @override
  Future<int> zoeClientFrbApiSocketAddrPort({required SocketAddr addr}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
            addr,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 90,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_16,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientFrbApiSocketAddrPortConstMeta,
        argValues: [addr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiSocketAddrPortConstMeta =>
      const TaskConstMeta(debugName: "socket_addr_port", argNames: ["addr"]);

  @override
  Future<String> zoeClientFrbApiSocketAddrToString({required SocketAddr addr}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
            addr,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 91,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kZoeClientFrbApiSocketAddrToStringConstMeta,
        argValues: [addr],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiSocketAddrToStringConstMeta =>
      const TaskConstMeta(
        debugName: "socket_addr_to_string",
        argNames: ["addr"],
      );

  @override
  Future<bool> crateApiSystemTestSystemCheckResultsCategoryHasFailures({
    required SystemCheckResults results,
    required TestCategory category,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
            results,
            serializer,
          );
          sse_encode_test_category(category, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 92,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSystemTestSystemCheckResultsCategoryHasFailuresConstMeta,
        argValues: [results, category],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSystemTestSystemCheckResultsCategoryHasFailuresConstMeta =>
      const TaskConstMeta(
        debugName: "system_check_results_category_has_failures",
        argNames: ["results", "category"],
      );

  @override
  Future<int> crateApiSystemTestSystemCheckResultsFailedCount({
    required SystemCheckResults results,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
            results,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 93,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestSystemCheckResultsFailedCountConstMeta,
        argValues: [results],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestSystemCheckResultsFailedCountConstMeta =>
      const TaskConstMeta(
        debugName: "system_check_results_failed_count",
        argNames: ["results"],
      );

  @override
  Future<List<TestCategory>> crateApiSystemTestSystemCheckResultsGetCategories({
    required SystemCheckResults results,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
            results,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 94,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_test_category,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestSystemCheckResultsGetCategoriesConstMeta,
        argValues: [results],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSystemTestSystemCheckResultsGetCategoriesConstMeta =>
      const TaskConstMeta(
        debugName: "system_check_results_get_categories",
        argNames: ["results"],
      );

  @override
  Future<List<TestInfo>>
  crateApiSystemTestSystemCheckResultsGetTestsForCategory({
    required SystemCheckResults results,
    required TestCategory category,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
            results,
            serializer,
          );
          sse_encode_test_category(category, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 95,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSystemTestSystemCheckResultsGetTestsForCategoryConstMeta,
        argValues: [results, category],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSystemTestSystemCheckResultsGetTestsForCategoryConstMeta =>
      const TaskConstMeta(
        debugName: "system_check_results_get_tests_for_category",
        argNames: ["results", "category"],
      );

  @override
  Future<bool> crateApiSystemTestSystemCheckResultsIsSuccess({
    required SystemCheckResults results,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
            results,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 96,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestSystemCheckResultsIsSuccessConstMeta,
        argValues: [results],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestSystemCheckResultsIsSuccessConstMeta =>
      const TaskConstMeta(
        debugName: "system_check_results_is_success",
        argNames: ["results"],
      );

  @override
  Future<int> crateApiSystemTestSystemCheckResultsPassedCount({
    required SystemCheckResults results,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
            results,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 97,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestSystemCheckResultsPassedCountConstMeta,
        argValues: [results],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestSystemCheckResultsPassedCountConstMeta =>
      const TaskConstMeta(
        debugName: "system_check_results_passed_count",
        argNames: ["results"],
      );

  @override
  Future<int> crateApiSystemTestSystemCheckResultsTotalCount({
    required SystemCheckResults results,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
            results,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 98,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_32,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestSystemCheckResultsTotalCountConstMeta,
        argValues: [results],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestSystemCheckResultsTotalCountConstMeta =>
      const TaskConstMeta(
        debugName: "system_check_results_total_count",
        argNames: ["results"],
      );

  @override
  Future<BigInt> crateApiSystemTestSystemCheckResultsTotalDurationMs({
    required SystemCheckResults results,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
            results,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 99,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: null,
        ),
        constMeta:
            kCrateApiSystemTestSystemCheckResultsTotalDurationMsConstMeta,
        argValues: [results],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta
  get kCrateApiSystemTestSystemCheckResultsTotalDurationMsConstMeta =>
      const TaskConstMeta(
        debugName: "system_check_results_total_duration_ms",
        argNames: ["results"],
      );

  @override
  Future<BigInt> crateApiSystemTestTestInfoDurationMs({
    required TestInfo test,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
            test,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 100,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_u_64,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestTestInfoDurationMsConstMeta,
        argValues: [test],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestTestInfoDurationMsConstMeta =>
      const TaskConstMeta(
        debugName: "test_info_duration_ms",
        argNames: ["test"],
      );

  @override
  Future<List<String>> crateApiSystemTestTestInfoGetDetails({
    required TestInfo test,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
            test,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 101,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestTestInfoGetDetailsConstMeta,
        argValues: [test],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestTestInfoGetDetailsConstMeta =>
      const TaskConstMeta(
        debugName: "test_info_get_details",
        argNames: ["test"],
      );

  @override
  Future<String?> crateApiSystemTestTestInfoGetError({required TestInfo test}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
            test,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 102,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_opt_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestTestInfoGetErrorConstMeta,
        argValues: [test],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestTestInfoGetErrorConstMeta =>
      const TaskConstMeta(debugName: "test_info_get_error", argNames: ["test"]);

  @override
  Future<String> crateApiSystemTestTestInfoGetName({required TestInfo test}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
            test,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 103,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_String,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestTestInfoGetNameConstMeta,
        argValues: [test],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestTestInfoGetNameConstMeta =>
      const TaskConstMeta(debugName: "test_info_get_name", argNames: ["test"]);

  @override
  Future<bool> crateApiSystemTestTestInfoIsFailed({required TestInfo test}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
            test,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 104,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestTestInfoIsFailedConstMeta,
        argValues: [test],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestTestInfoIsFailedConstMeta =>
      const TaskConstMeta(debugName: "test_info_is_failed", argNames: ["test"]);

  @override
  Future<bool> crateApiSystemTestTestInfoIsPassed({required TestInfo test}) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
            test,
            serializer,
          );
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 105,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_bool,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSystemTestTestInfoIsPassedConstMeta,
        argValues: [test],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSystemTestTestInfoIsPassedConstMeta =>
      const TaskConstMeta(debugName: "test_info_is_passed", argNames: ["test"]);

  @override
  Future<VerifyingKey> zoeClientFrbApiVerifyingKeyFromHex({
    required String hex,
  }) {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(hex, serializer);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 106,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey,
          decodeErrorData: sse_decode_String,
        ),
        constMeta: kZoeClientFrbApiVerifyingKeyFromHexConstMeta,
        argValues: [hex],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kZoeClientFrbApiVerifyingKeyFromHexConstMeta =>
      const TaskConstMeta(
        debugName: "verifying_key_from_hex",
        argNames: ["hex"],
      );

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ArcZoeClientSessionManager => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcZoeClientSessionManager;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ArcZoeClientSessionManager => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcZoeClientSessionManager;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Client => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Client => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ClientBuilder => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ClientBuilder => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_ClientSecret => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_ClientSecret => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_EncryptionKey => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_EncryptionKey => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_FileRef => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_FileRef => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupManager => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupManager => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupManagerBuilder => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManagerBuilder;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupManagerBuilder => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManagerBuilder;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupRole => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupRole => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupSession => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupSession => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_GroupState => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_GroupState => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_KeyId => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_KeyId => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_KeyPair => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_KeyPair => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_KeyPairError => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_KeyPairError => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_MessageId => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_MessageId => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_PathBuf => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_PathBuf => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayAddress => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayAddress => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayConnectionInfo => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayConnectionInfo => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayConnectionStatus => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayConnectionStatus => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayInfo => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayInfo => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_RelayStatusUpdate => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_RelayStatusUpdate => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_Signature => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_Signature => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SigningKey => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SigningKey => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SocketAddr => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SocketAddr => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_SystemCheckResults => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_SystemCheckResults => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_TestInfo => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_TestInfo => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VerifyError => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VerifyError => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyError;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VerifyingKey => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VerifyingKey => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey;

  RustArcIncrementStrongCountFnType
  get rust_arc_increment_strong_count_VerifyingKeyError => wire
      .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError;

  RustArcDecrementStrongCountFnType
  get rust_arc_decrement_strong_count_VerifyingKeyError => wire
      .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError;

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  ArcZoeClientSessionManager
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcZoeClientSessionManager(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcZoeClientSessionManagerImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  Client
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientSecret
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientSecretImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EncryptionKey
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EncryptionKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FileRef
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileRefImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupManager
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupManagerBuilder
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManagerBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupManagerBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupRole
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupRoleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupSession
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupState
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPair
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageId
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayAddress
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayAddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayConnectionInfo
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayConnectionInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayConnectionStatus
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayConnectionStatusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayInfo
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayStatusUpdate
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayStatusUpdateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Signature
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SigningKey
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SigningKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SocketAddr
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SocketAddrImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SystemCheckResults
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SystemCheckResultsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TestInfo
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyingKey
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyingKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyingKeyError
  dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyingKeyErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupSession
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayConnectionInfo
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayConnectionInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayInfo
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayStatusUpdate
  dco_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayStatusUpdateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Client
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientSecret
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientSecretImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FileRef
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileRefImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupManager
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupSession
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPair
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageId
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayConnectionInfo
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayConnectionInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayInfo
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayStatusUpdate
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayStatusUpdateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Signature
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SigningKey
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SigningKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SocketAddr
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SocketAddrImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SystemCheckResults
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SystemCheckResultsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TestInfo
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyingKey
  dco_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyingKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Map<MessageId, GroupSession>
  dco_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession_None(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  Map<MessageId, GroupState>
  dco_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState_None(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Map.fromEntries(
      dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
        raw,
      ).map((e) => MapEntry(e.$1, e.$2)),
    );
  }

  @protected
  ArcZoeClientSessionManager
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcZoeClientSessionManager(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ArcZoeClientSessionManagerImpl.frbInternalDcoDecode(
      raw as List<dynamic>,
    );
  }

  @protected
  Client
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientBuilder
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  ClientSecret
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return ClientSecretImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  EncryptionKey
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return EncryptionKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  FileRef
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return FileRefImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupManager
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupManagerImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupManagerBuilder
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManagerBuilder(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupManagerBuilderImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupRole
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupRoleImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupSession
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupSessionImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  GroupState
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return GroupStateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPair
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  KeyPairError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return KeyPairErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  MessageId
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return MessageIdImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  PathBuf
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return PathBufImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayAddress
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayAddressImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayConnectionInfo
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayConnectionInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayConnectionStatus
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayConnectionStatusImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayInfo
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RelayStatusUpdate
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return RelayStatusUpdateImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  Signature
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SignatureImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SigningKey
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SigningKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SocketAddr
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SocketAddrImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  SystemCheckResults
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return SystemCheckResultsImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  TestInfo
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestInfoImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyingKey
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyingKeyImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  VerifyingKeyError
  dco_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return VerifyingKeyErrorImpl.frbInternalDcoDecode(raw as List<dynamic>);
  }

  @protected
  RustStreamSink<SystemCheckResults>
  dco_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults_Sse(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  RustStreamSink<OverallConnectionStatus>
  dco_decode_StreamSink_overall_connection_status_Sse(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    throw UnimplementedError();
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  Algorithm dco_decode_algorithm(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Algorithm.values[raw as int];
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  GroupRole
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
      raw,
    );
  }

  @protected
  GroupSession
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
      raw,
    );
  }

  @protected
  GroupState
  dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
      raw,
    );
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<EncryptionKey>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey,
        )
        .toList();
  }

  @protected
  List<RelayAddress>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress,
        )
        .toList();
  }

  @protected
  List<RelayConnectionInfo>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo,
        )
        .toList();
  }

  @protected
  List<TestInfo>
  dco_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo,
        )
        .toList();
  }

  @protected
  List<String> dco_decode_list_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_String).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(MessageId, GroupSession)>
  dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session,
        )
        .toList();
  }

  @protected
  List<(MessageId, GroupState)>
  dco_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(
          dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state,
        )
        .toList();
  }

  @protected
  List<TestCategory> dco_decode_list_test_category(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_test_category).toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  GroupRole?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
            raw,
          );
  }

  @protected
  GroupSession?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
            raw,
          );
  }

  @protected
  GroupState?
  dco_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null
        ? null
        : dco_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
            raw,
          );
  }

  @protected
  OverallConnectionStatus dco_decode_overall_connection_status(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return OverallConnectionStatus(
      isConnected: dco_decode_bool(arr[0]),
      connectedCount: dco_decode_usize(arr[1]),
      totalCount: dco_decode_usize(arr[2]),
    );
  }

  @protected
  (MessageId, GroupSession)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
        arr[0],
      ),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
        arr[1],
      ),
    );
  }

  @protected
  (MessageId, GroupState)
  dco_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
        arr[0],
      ),
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
        arr[1],
      ),
    );
  }

  @protected
  TestCategory dco_decode_test_category(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return TestCategory.values[raw as int];
  }

  @protected
  int dco_decode_u_16(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  BigInt dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array32 dco_decode_u_8_array_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array32(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  ArcZoeClientSessionManager
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcZoeClientSessionManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcZoeClientSessionManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Client
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientBuilder
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientSecret
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientSecretImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EncryptionKey
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EncryptionKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FileRef
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FileRefImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupManager
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupManagerBuilder
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManagerBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupManagerBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupRole
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupRoleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupSession
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupState
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  KeyId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  KeyPair
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  KeyPairError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MessageId
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PathBuf
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayAddress
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayAddressImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayConnectionInfo
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayConnectionInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayConnectionStatus
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayConnectionStatusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayInfo
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayStatusUpdate
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayStatusUpdateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Signature
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SigningKey
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SigningKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SocketAddr
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SocketAddrImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SystemCheckResults
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SystemCheckResultsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  TestInfo
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TestInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VerifyError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VerifyingKey
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyingKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VerifyingKeyError
  sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyingKeyErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientBuilder
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupSession
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayConnectionInfo
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayConnectionInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayInfo
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayStatusUpdate
  sse_decode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayStatusUpdateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Client
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientSecret
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientSecretImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FileRef
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FileRefImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupManager
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupSession
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  KeyPair
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MessageId
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayConnectionInfo
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayConnectionInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayInfo
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayStatusUpdate
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayStatusUpdateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Signature
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SigningKey
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SigningKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SocketAddr
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SocketAddrImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SystemCheckResults
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SystemCheckResultsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  TestInfo
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TestInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VerifyingKey
  sse_decode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyingKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Map<MessageId, GroupSession>
  sse_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
          deserializer,
        );
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  Map<MessageId, GroupState>
  sse_decode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState_None(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner =
        sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
          deserializer,
        );
    return Map.fromEntries(inner.map((e) => MapEntry(e.$1, e.$2)));
  }

  @protected
  ArcZoeClientSessionManager
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcZoeClientSessionManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ArcZoeClientSessionManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Client
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientBuilder
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  ClientSecret
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return ClientSecretImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  EncryptionKey
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return EncryptionKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  FileRef
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return FileRefImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupManager
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupManagerImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupManagerBuilder
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManagerBuilder(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupManagerBuilderImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupRole
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupRoleImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupSession
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupSessionImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  GroupState
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return GroupStateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  KeyId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  KeyPair
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  KeyPairError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return KeyPairErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  MessageId
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return MessageIdImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  PathBuf
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return PathBufImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayAddress
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayAddressImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayConnectionInfo
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayConnectionInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayConnectionStatus
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayConnectionStatusImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayInfo
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RelayStatusUpdate
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return RelayStatusUpdateImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  Signature
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SignatureImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SigningKey
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SigningKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SocketAddr
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SocketAddrImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  SystemCheckResults
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return SystemCheckResultsImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  TestInfo
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return TestInfoImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VerifyError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VerifyingKey
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyingKeyImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  VerifyingKeyError
  sse_decode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return VerifyingKeyErrorImpl.frbInternalSseDecode(
      sse_decode_usize(deserializer),
      sse_decode_i_32(deserializer),
    );
  }

  @protected
  RustStreamSink<SystemCheckResults>
  sse_decode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  RustStreamSink<OverallConnectionStatus>
  sse_decode_StreamSink_overall_connection_status_Sse(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    throw UnimplementedError('Unreachable ()');
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  Algorithm sse_decode_algorithm(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Algorithm.values[inner];
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  GroupRole
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
      deserializer,
    ));
  }

  @protected
  GroupSession
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
      deserializer,
    ));
  }

  @protected
  GroupState
  sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
      deserializer,
    ));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<EncryptionKey>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <EncryptionKey>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<RelayAddress>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RelayAddress>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<RelayConnectionInfo>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <RelayConnectionInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<TestInfo>
  sse_decode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestInfo>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<String> sse_decode_list_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <String>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_String(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(MessageId, GroupSession)>
  sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(MessageId, GroupSession)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<(MessageId, GroupState)>
  sse_decode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(MessageId, GroupState)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(
        sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
          deserializer,
        ),
      );
    }
    return ans_;
  }

  @protected
  List<TestCategory> sse_decode_list_test_category(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TestCategory>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_test_category(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  GroupRole?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  GroupSession?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  GroupState?
  sse_decode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
        deserializer,
      ));
    } else {
      return null;
    }
  }

  @protected
  OverallConnectionStatus sse_decode_overall_connection_status(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_isConnected = sse_decode_bool(deserializer);
    var var_connectedCount = sse_decode_usize(deserializer);
    var var_totalCount = sse_decode_usize(deserializer);
    return OverallConnectionStatus(
      isConnected: var_isConnected,
      connectedCount: var_connectedCount,
      totalCount: var_totalCount,
    );
  }

  @protected
  (MessageId, GroupSession)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
          deserializer,
        );
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  (MessageId, GroupState)
  sse_decode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
          deserializer,
        );
    var var_field1 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
          deserializer,
        );
    return (var_field0, var_field1);
  }

  @protected
  TestCategory sse_decode_test_category(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return TestCategory.values[inner];
  }

  @protected
  int sse_decode_u_16(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint16();
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  BigInt sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array32 sse_decode_u_8_array_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array32(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  void sse_encode_AnyhowException(
    AnyhowException self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcZoeClientSessionManager(
    ArcZoeClientSessionManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcZoeClientSessionManagerImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    Client self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
    ClientBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientBuilderImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
    ClientSecret self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientSecretImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
    EncryptionKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EncryptionKeyImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
    FileRef self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FileRefImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
    GroupManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupManagerImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManagerBuilder(
    GroupManagerBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupManagerBuilderImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    GroupRole self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupRoleImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    GroupSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupSessionImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    GroupState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupStateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId(
    KeyId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as KeyIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
    KeyPair self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as KeyPairImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError(
    KeyPairError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as KeyPairErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
    MessageId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MessageIdImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PathBufImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
    RelayAddress self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayAddressImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    RelayConnectionInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayConnectionInfoImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus(
    RelayConnectionStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayConnectionStatusImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    RelayInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayInfoImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    RelayStatusUpdate self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayStatusUpdateImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
    Signature self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SignatureImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
    SigningKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SigningKeyImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
    SocketAddr self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SocketAddrImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
    SystemCheckResults self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SystemCheckResultsImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    TestInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TestInfoImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyError(
    VerifyError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VerifyErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
    VerifyingKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VerifyingKeyImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError(
    VerifyingKeyError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VerifyingKeyErrorImpl).frbInternalSseEncode(move: true),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
    ClientBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientBuilderImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    GroupSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupSessionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    RelayConnectionInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayConnectionInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    RelayInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_RefMut_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    RelayStatusUpdate self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayStatusUpdateImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    Client self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
    ClientSecret self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientSecretImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
    FileRef self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FileRefImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
    GroupManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupManagerImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    GroupSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupSessionImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
    KeyPair self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as KeyPairImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
    MessageId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MessageIdImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    RelayConnectionInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayConnectionInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    RelayInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    RelayStatusUpdate self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayStatusUpdateImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
    Signature self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SignatureImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
    SigningKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SigningKeyImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
    SocketAddr self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SocketAddrImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
    SystemCheckResults self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SystemCheckResultsImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    TestInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TestInfoImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Auto_Ref_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
    VerifyingKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VerifyingKeyImpl).frbInternalSseEncode(move: false),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession_None(
    Map<MessageId, GroupSession> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_Map_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState_None(
    Map<MessageId, GroupState> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
      self.entries.map((e) => (e.key, e.value)).toList(),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerArcZoeClientSessionManager(
    ArcZoeClientSessionManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ArcZoeClientSessionManagerImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClient(
    Client self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientBuilder(
    ClientBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientBuilderImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerClientSecret(
    ClientSecret self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as ClientSecretImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
    EncryptionKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as EncryptionKeyImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerFileRef(
    FileRef self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as FileRefImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManager(
    GroupManager self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupManagerImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupManagerBuilder(
    GroupManagerBuilder self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupManagerBuilderImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    GroupRole self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupRoleImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    GroupSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupSessionImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    GroupState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as GroupStateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyId(
    KeyId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as KeyIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPair(
    KeyPair self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as KeyPairImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerKeyPairError(
    KeyPairError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as KeyPairErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
    MessageId self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as MessageIdImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerPathBuf(
    PathBuf self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as PathBufImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
    RelayAddress self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayAddressImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    RelayConnectionInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayConnectionInfoImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionStatus(
    RelayConnectionStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayConnectionStatusImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayInfo(
    RelayInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayInfoImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayStatusUpdate(
    RelayStatusUpdate self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as RelayStatusUpdateImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSignature(
    Signature self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SignatureImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSigningKey(
    SigningKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SigningKeyImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSocketAddr(
    SocketAddr self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SocketAddrImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults(
    SystemCheckResults self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as SystemCheckResultsImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    TestInfo self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as TestInfoImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyError(
    VerifyError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VerifyErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKey(
    VerifyingKey self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VerifyingKeyImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerVerifyingKeyError(
    VerifyingKeyError self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(
      (self as VerifyingKeyErrorImpl).frbInternalSseEncode(move: null),
      serializer,
    );
  }

  @protected
  void
  sse_encode_StreamSink_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults_Sse(
    RustStreamSink<SystemCheckResults> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData:
              sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerSystemCheckResults,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_StreamSink_overall_connection_status_Sse(
    RustStreamSink<OverallConnectionStatus> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(
      self.setupAndSerialize(
        codec: SseCodec(
          decodeSuccessData: sse_decode_overall_connection_status,
          decodeErrorData: sse_decode_AnyhowException,
        ),
      ),
      serializer,
    );
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_algorithm(Algorithm self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    GroupRole self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    GroupSession self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
      self,
      serializer,
    );
  }

  @protected
  void
  sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    GroupState self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
      self,
      serializer,
    );
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
    List<EncryptionKey> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerEncryptionKey(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
    List<RelayAddress> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayAddress(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
    List<RelayConnectionInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerRelayConnectionInfo(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
    List<TestInfo> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerTestInfo(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_String(List<String> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_String(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
    List<int> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(
      self is Uint8List ? self : Uint8List.fromList(self),
    );
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void
  sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
    List<(MessageId, GroupSession)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
        item,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_list_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
    List<(MessageId, GroupState)> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
        item,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_list_test_category(
    List<TestCategory> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_test_category(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
    GroupRole? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupRole(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
    GroupSession? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
        self,
        serializer,
      );
    }
  }

  @protected
  void
  sse_encode_opt_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
    GroupState? self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
        self,
        serializer,
      );
    }
  }

  @protected
  void sse_encode_overall_connection_status(
    OverallConnectionStatus self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self.isConnected, serializer);
    sse_encode_usize(self.connectedCount, serializer);
    sse_encode_usize(self.totalCount, serializer);
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_session(
    (MessageId, GroupSession) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
      self.$1,
      serializer,
    );
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupSession(
      self.$2,
      serializer,
    );
  }

  @protected
  void
  sse_encode_record_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_message_id_auto_owned_rust_opaque_flutter_rust_bridgefor_generated_rust_auto_opaque_inner_group_state(
    (MessageId, GroupState) self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerMessageId(
      self.$1,
      serializer,
    );
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedRustAutoOpaqueInnerGroupState(
      self.$2,
      serializer,
    );
  }

  @protected
  void sse_encode_test_category(TestCategory self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_u_16(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint16(self);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_32(U8Array32 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }
}

@sealed
class ArcZoeClientSessionManagerImpl extends RustOpaque
    implements ArcZoeClientSessionManager {
  // Not to be used by end users
  ArcZoeClientSessionManagerImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ArcZoeClientSessionManagerImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_ArcZoeClientSessionManager,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcZoeClientSessionManager,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_ArcZoeClientSessionManagerPtr,
  );
}

@sealed
class ClientBuilderImpl extends RustOpaque implements ClientBuilder {
  // Not to be used by end users
  ClientBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientBuilderImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ClientBuilder,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientBuilder,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientBuilderPtr,
  );

  /// Enable or disable automatic connection to server during build
  ///
  /// When autoconnect is true (default for backward compatibility), the client
  /// will require server information and connect immediately during build().
  /// When autoconnect is false, the client starts in offline mode and can
  /// connect to relays later using add_relay().
  Future<void> autoconnect({required bool autoconnect}) =>
      RustLib.instance.api.zoeClientClientClientBuilderAutoconnect(
        that: this,
        autoconnect: autoconnect,
      );

  Future<Client> build() =>
      RustLib.instance.api.zoeClientClientClientBuilderBuild(that: this);

  Future<void> clientSecret({required ClientSecret secret}) => RustLib
      .instance
      .api
      .zoeClientClientClientBuilderClientSecret(that: this, secret: secret);

  /// Set the storage database path (convenience method)
  Future<void> dbStorageDir({required String path}) => RustLib.instance.api
      .zoeClientClientClientBuilderDbStorageDir(that: this, path: path);

  /// Set the encryption key for storage
  Future<void> encryptionKey({required U8Array32 key}) => RustLib.instance.api
      .zoeClientClientClientBuilderEncryptionKey(that: this, key: key);

  Future<void> mediaStorageDir({required String mediaStorageDir}) =>
      RustLib.instance.api.zoeClientClientClientBuilderMediaStorageDir(
        that: this,
        mediaStorageDir: mediaStorageDir,
      );

  Future<void> serverInfo({
    required VerifyingKey serverPublicKey,
    required SocketAddr serverAddr,
  }) => RustLib.instance.api.zoeClientClientClientBuilderServerInfo(
    that: this,
    serverPublicKey: serverPublicKey,
    serverAddr: serverAddr,
  );

  Future<void> servers({required List<RelayAddress> servers}) => RustLib
      .instance
      .api
      .zoeClientClientClientBuilderServers(that: this, servers: servers);
}

@sealed
class ClientImpl extends RustOpaque implements Client {
  // Not to be used by end users
  ClientImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Client,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Client,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientPtr,
  );

  /// Add a relay server to the client
  ///
  /// This will attempt to connect to all addresses in the RelayAddress in random order
  /// with a 10-second timeout per attempt. Only adds the relay to local state if a
  /// connection succeeds.
  Future<void> addRelay({required RelayAddress address}) => RustLib.instance.api
      .zoeClientClientClientAddRelay(that: this, address: address);

  /// Get the current client secret
  Future<ClientSecret> clientSecret() =>
      RustLib.instance.api.zoeClientClientClientClientSecret(that: this);

  Future<String> clientSecretHex() =>
      RustLib.instance.api.zoeClientClientClientClientSecretHex(that: this);

  Future<void> close() =>
      RustLib.instance.api.zoeClientClientClientClose(that: this);

  /// Get list of all configured relays with their connection status
  Future<List<RelayConnectionInfo>> getRelayStatus() =>
      RustLib.instance.api.zoeClientClientClientGetRelayStatus(that: this);

  Future<GroupManager> groupManager() =>
      RustLib.instance.api.zoeClientClientClientGroupManager(that: this);

  /// Check if any relays are currently connected
  Future<bool> hasConnectedRelays() =>
      RustLib.instance.api.zoeClientClientClientHasConnectedRelays(that: this);

  /// Check if a file exists in storage
  ///
  /// # Arguments
  ///
  /// * `stored_info` - Metadata from when the file was stored
  ///
  /// # Returns
  ///
  /// `true` if the file exists in storage, `false` otherwise
  Future<bool> hasFile({required FileRef storedInfo}) => RustLib.instance.api
      .zoeClientClientClientHasFile(that: this, storedInfo: storedInfo);

  Future<String> idHex() =>
      RustLib.instance.api.zoeClientClientClientIdHex(that: this);

  /// Calculate the current overall connection status
  ///
  /// This is computed from the current relay states, ensuring it's always accurate but makes it
  /// a bit more expensive to compute. For live updates it is recommended to use `overall_status_stream`
  /// instead.
  Future<OverallConnectionStatus> overallStatus() =>
      RustLib.instance.api.zoeClientClientClientOverallStatus(that: this);

  /// Attempt to reconnect to all failed relays
  Future<BigInt> reconnectFailedRelays() => RustLib.instance.api
      .zoeClientClientClientReconnectFailedRelays(that: this);

  /// Remove a relay connection (offline mode only)
  Future<bool> removeRelay({required VerifyingKey serverPublicKey}) =>
      RustLib.instance.api.zoeClientClientClientRemoveRelay(
        that: this,
        serverPublicKey: serverPublicKey,
      );

  /// Retrieve a file from storage and save it to disk
  ///
  /// This method:
  /// 1. Retrieves the encrypted data from blob storage using the FileRef
  /// 2. Decrypts the content
  /// 3. Writes the decrypted content to the specified path
  ///
  /// # Arguments
  ///
  /// * `file_ref` - Metadata for the file to retrieve
  /// * `output_path` - Path where the decrypted file should be saved
  ///
  /// # Errors
  ///
  /// Returns an error if:
  /// - The file cannot be found in storage
  /// - Decryption fails
  /// - Writing to disk fails
  Future<void> retrieveFile({
    required FileRef fileRef,
    required PathBuf outputPath,
  }) => RustLib.instance.api.zoeClientClientClientRetrieveFile(
    that: this,
    fileRef: fileRef,
    outputPath: outputPath,
  );

  /// Retrieve a file from storage as bytes
  ///
  /// This method:
  /// 1. Retrieves the encrypted data from blob storage using the FileRef
  /// 2. Decrypts the content
  /// 3. Returns the decrypted content as bytes
  ///
  /// # Arguments
  ///
  /// * `file_ref` - Metadata for the file to retrieve
  ///
  /// # Returns
  ///
  /// The decrypted file content as `Vec<u8>`
  ///
  /// # Errors
  ///
  /// Returns an error if:
  /// - The file cannot be found in storage
  /// - Decryption fails
  Future<Uint8List> retrieveFileBytes({required FileRef fileRef}) => RustLib
      .instance
      .api
      .zoeClientClientClientRetrieveFileBytes(that: this, fileRef: fileRef);

  /// Close the client and clean up all resources
  /// Get access to the session manager for PQXDH operations
  ///
  /// This provides access to the underlying session manager which handles
  /// PQXDH protocol handlers and state management.
  ///
  /// # Returns
  ///
  /// A reference to the `SessionManager`
  Future<ArcZoeClientSessionManager> sessionManager() =>
      RustLib.instance.api.zoeClientClientClientSessionManager(that: this);

  /// Store raw data (not from a file) with encryption and blob storage
  ///
  /// This method allows storing arbitrary data without reading from disk.
  ///
  /// # Arguments
  ///
  /// * `data` - The raw data to store
  /// * `reference_name` - A reference name for the data (used in metadata)
  /// * `content_type` - Optional content type for metadata
  ///
  /// # Returns
  ///
  /// `FileRef` containing the blob hash, encryption info, and metadata
  Future<FileRef> storeData({
    required List<int> data,
    required String referenceName,
    String? contentType,
  }) => RustLib.instance.api.zoeClientClientClientStoreData(
    that: this,
    data: data,
    referenceName: referenceName,
    contentType: contentType,
  );

  /// Store a file by reading from disk, encrypting, and storing in blob storage
  ///
  /// This method:
  /// 1. Reads the file from the provided path
  /// 2. Encrypts the content using convergent encryption
  /// 3. Stores the encrypted data in the blob store
  /// 4. Returns metadata needed to retrieve the file later
  ///
  /// # Arguments
  ///
  /// * `file_path` - Path to the file to store
  ///
  /// # Returns
  ///
  /// A `FileRef` containing the metadata needed to retrieve the file
  ///
  /// # Errors
  ///
  /// Returns an error if:
  /// - The file cannot be read
  /// - Encryption fails
  /// - Blob storage operation fails
  Future<FileRef> storeFile({required PathBuf filePath}) => RustLib.instance.api
      .zoeClientClientClientStoreFile(that: this, filePath: filePath);
}

@sealed
class ClientSecretImpl extends RustOpaque implements ClientSecret {
  // Not to be used by end users
  ClientSecretImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  ClientSecretImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_ClientSecret,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientSecret,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_ClientSecretPtr,
  );

  /// Get the list of configured servers
  Future<void> servers() =>
      RustLib.instance.api.zoeClientClientClientSecretServers(that: this);

  Future<String> toHex() =>
      RustLib.instance.api.zoeClientClientClientSecretToHex(that: this);
}

@sealed
class EncryptionKeyImpl extends RustOpaque implements EncryptionKey {
  // Not to be used by end users
  EncryptionKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  EncryptionKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_EncryptionKey,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_EncryptionKey,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_EncryptionKeyPtr,
  );
}

@sealed
class FileRefImpl extends RustOpaque implements FileRef {
  // Not to be used by end users
  FileRefImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  FileRefImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_FileRef,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_FileRef,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_FileRefPtr,
  );
}

@sealed
class GroupManagerBuilderImpl extends RustOpaque
    implements GroupManagerBuilder {
  // Not to be used by end users
  GroupManagerBuilderImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GroupManagerBuilderImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_GroupManagerBuilder,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_GroupManagerBuilder,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_GroupManagerBuilderPtr,
  );

  Future<GroupManager> build() => RustLib.instance.api
      .zoeStateMachineGroupGroupManagerBuilderBuild(that: this);
}

@sealed
class GroupManagerImpl extends RustOpaque implements GroupManager {
  // Not to be used by end users
  GroupManagerImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GroupManagerImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_GroupManager,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupManager,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupManagerPtr,
  );

  /// Get all managed group sessions
  Future<Map<MessageId, GroupSession>> allGroupSessions() => RustLib
      .instance
      .api
      .zoeStateMachineGroupGroupManagerAllGroupSessions(that: this);

  /// Get all managed groups (state only, for backward compatibility)
  Future<Map<MessageId, GroupState>> allGroups() => RustLib.instance.api
      .zoeStateMachineGroupGroupManagerAllGroups(that: this);

  /// Get a group session (state + encryption)
  Future<GroupSession?> groupSession({required MessageId groupId}) =>
      RustLib.instance.api.zoeStateMachineGroupGroupManagerGroupSession(
        that: this,
        groupId: groupId,
      );

  /// Get a group's current state
  Future<GroupState?> groupState({required MessageId groupId}) => RustLib
      .instance
      .api
      .zoeStateMachineGroupGroupManagerGroupState(that: this, groupId: groupId);

  /// Check if a user is a member of a specific group
  Future<bool> isMember({
    required MessageId groupId,
    required VerifyingKey user,
  }) => RustLib.instance.api.zoeStateMachineGroupGroupManagerIsMember(
    that: this,
    groupId: groupId,
    user: user,
  );

  /// Get a user's role in a specific group
  Future<GroupRole?> memberRole({
    required MessageId groupId,
    required VerifyingKey user,
  }) => RustLib.instance.api.zoeStateMachineGroupGroupManagerMemberRole(
    that: this,
    groupId: groupId,
    user: user,
  );
}

@sealed
class GroupRoleImpl extends RustOpaque implements GroupRole {
  // Not to be used by end users
  GroupRoleImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GroupRoleImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_GroupRole,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupRole,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupRolePtr,
  );
}

@sealed
class GroupSessionImpl extends RustOpaque implements GroupSession {
  // Not to be used by end users
  GroupSessionImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GroupSessionImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_GroupSession,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupSession,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupSessionPtr,
  );

  EncryptionKey get currentKey => RustLib.instance.api
      .zoeStateMachineStateGroupSessionAutoAccessorGetCurrentKey(that: this);

  List<EncryptionKey> get previousKeys => RustLib.instance.api
      .zoeStateMachineStateGroupSessionAutoAccessorGetPreviousKeys(that: this);

  GroupState get state => RustLib.instance.api
      .zoeStateMachineStateGroupSessionAutoAccessorGetState(that: this);

  set currentKey(EncryptionKey currentKey) => RustLib.instance.api
      .zoeStateMachineStateGroupSessionAutoAccessorSetCurrentKey(
        that: this,
        currentKey: currentKey,
      );

  set previousKeys(List<EncryptionKey> previousKeys) => RustLib.instance.api
      .zoeStateMachineStateGroupSessionAutoAccessorSetPreviousKeys(
        that: this,
        previousKeys: previousKeys,
      );

  set state(GroupState state) =>
      RustLib.instance.api.zoeStateMachineStateGroupSessionAutoAccessorSetState(
        that: this,
        state: state,
      );
}

@sealed
class GroupStateImpl extends RustOpaque implements GroupState {
  // Not to be used by end users
  GroupStateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  GroupStateImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_GroupState,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupState,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_GroupStatePtr,
  );
}

@sealed
class KeyIdImpl extends RustOpaque implements KeyId {
  // Not to be used by end users
  KeyIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeyIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_KeyId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyIdPtr,
  );
}

@sealed
class KeyPairErrorImpl extends RustOpaque implements KeyPairError {
  // Not to be used by end users
  KeyPairErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeyPairErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_KeyPairError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPairError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPairErrorPtr,
  );
}

@sealed
class KeyPairImpl extends RustOpaque implements KeyPair {
  // Not to be used by end users
  KeyPairImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  KeyPairImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_KeyPair,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPair,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_KeyPairPtr,
  );

  /// Get the algorithm for this key type
  Future<Algorithm> algorithm() =>
      RustLib.instance.api.zoeWireProtocolKeysKeyPairAlgorithm(that: this);

  Future<KeyId> id() =>
      RustLib.instance.api.zoeWireProtocolKeysKeyPairId(that: this);

  Future<VerifyingKey> publicKey() =>
      RustLib.instance.api.zoeWireProtocolKeysKeyPairPublicKey(that: this);

  Future<Signature> sign({required List<int> message}) => RustLib.instance.api
      .zoeWireProtocolKeysKeyPairSign(that: this, message: message);

  /// Encode the KeyPair to a PEM string suitable for environment variables or file storage.
  ///
  /// This method creates PEM blocks containing:
  /// - For Ed25519: Only the private key (public key can be derived)
  /// - For ML-DSA: Both private and public keys in separate PEM blocks (hash is derived from public key)
  ///
  /// All PEM blocks are prefixed with "ZOE" to identify them as Zoe-specific formats.
  ///
  /// # Returns
  ///
  /// A PEM-formatted string containing the key data.
  ///
  /// # Examples
  ///
  /// ```rust
  /// use zoe_wire_protocol::KeyPair;
  /// use rand::rngs::OsRng;
  ///
  /// let keypair = KeyPair::generate_ed25519(&mut OsRng);
  /// let pem_string = keypair.to_pem().unwrap();
  ///
  /// // Store in environment variable or file
  /// std::env::set_var("MY_PRIVATE_KEY", &pem_string);
  /// ```
  Future<String> toPem() =>
      RustLib.instance.api.zoeWireProtocolKeysKeyPairToPem(that: this);
}

@sealed
class MessageIdImpl extends RustOpaque implements MessageId {
  // Not to be used by end users
  MessageIdImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  MessageIdImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_MessageId,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessageId,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_MessageIdPtr,
  );
}

@sealed
class PathBufImpl extends RustOpaque implements PathBuf {
  // Not to be used by end users
  PathBufImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  PathBufImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_PathBuf,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBuf,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_PathBufPtr,
  );
}

@sealed
class RelayAddressImpl extends RustOpaque implements RelayAddress {
  // Not to be used by end users
  RelayAddressImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RelayAddressImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RelayAddress,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayAddress,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayAddressPtr,
  );
}

@sealed
class RelayConnectionInfoImpl extends RustOpaque
    implements RelayConnectionInfo {
  // Not to be used by end users
  RelayConnectionInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RelayConnectionInfoImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_RelayConnectionInfo,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_RelayConnectionInfo,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_RelayConnectionInfoPtr,
  );

  RelayInfo get info => RustLib.instance.api
      .zoeClientClientRelayConnectionInfoAutoAccessorGetInfo(that: this);

  RelayConnectionStatus get status => RustLib.instance.api
      .zoeClientClientRelayConnectionInfoAutoAccessorGetStatus(that: this);

  set info(RelayInfo info) => RustLib.instance.api
      .zoeClientClientRelayConnectionInfoAutoAccessorSetInfo(
        that: this,
        info: info,
      );

  set status(RelayConnectionStatus status) => RustLib.instance.api
      .zoeClientClientRelayConnectionInfoAutoAccessorSetStatus(
        that: this,
        status: status,
      );
}

@sealed
class RelayConnectionStatusImpl extends RustOpaque
    implements RelayConnectionStatus {
  // Not to be used by end users
  RelayConnectionStatusImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RelayConnectionStatusImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_increment_strong_count_RelayConnectionStatus,
    rustArcDecrementStrongCount: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_RelayConnectionStatus,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_RelayConnectionStatusPtr,
  );
}

@sealed
class RelayInfoImpl extends RustOpaque implements RelayInfo {
  // Not to be used by end users
  RelayInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RelayInfoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RelayInfo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayInfo,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayInfoPtr,
  );

  RelayAddress get relayAddress => RustLib.instance.api
      .zoeClientClientRelayInfoAutoAccessorGetRelayAddress(that: this);

  KeyId get relayId => RustLib.instance.api
      .zoeClientClientRelayInfoAutoAccessorGetRelayId(that: this);

  set relayAddress(RelayAddress relayAddress) =>
      RustLib.instance.api.zoeClientClientRelayInfoAutoAccessorSetRelayAddress(
        that: this,
        relayAddress: relayAddress,
      );

  set relayId(KeyId relayId) =>
      RustLib.instance.api.zoeClientClientRelayInfoAutoAccessorSetRelayId(
        that: this,
        relayId: relayId,
      );
}

@sealed
class RelayStatusUpdateImpl extends RustOpaque implements RelayStatusUpdate {
  // Not to be used by end users
  RelayStatusUpdateImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  RelayStatusUpdateImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_RelayStatusUpdate,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_RelayStatusUpdate,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_RelayStatusUpdatePtr,
  );

  RelayAddress get relayAddress => RustLib.instance.api
      .zoeClientClientRelayStatusUpdateAutoAccessorGetRelayAddress(that: this);

  KeyId get relayId => RustLib.instance.api
      .zoeClientClientRelayStatusUpdateAutoAccessorGetRelayId(that: this);

  RelayConnectionStatus get status => RustLib.instance.api
      .zoeClientClientRelayStatusUpdateAutoAccessorGetStatus(that: this);

  set relayAddress(RelayAddress relayAddress) => RustLib.instance.api
      .zoeClientClientRelayStatusUpdateAutoAccessorSetRelayAddress(
        that: this,
        relayAddress: relayAddress,
      );

  set relayId(KeyId relayId) => RustLib.instance.api
      .zoeClientClientRelayStatusUpdateAutoAccessorSetRelayId(
        that: this,
        relayId: relayId,
      );

  set status(RelayConnectionStatus status) => RustLib.instance.api
      .zoeClientClientRelayStatusUpdateAutoAccessorSetStatus(
        that: this,
        status: status,
      );
}

@sealed
class SignatureImpl extends RustOpaque implements Signature {
  // Not to be used by end users
  SignatureImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SignatureImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_Signature,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_Signature,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SignaturePtr,
  );

  /// Encode the Signature to bytes for serialization
  Future<Uint8List> encode() =>
      RustLib.instance.api.zoeWireProtocolKeysSignatureEncode(that: this);

  Future<KeyId> id() =>
      RustLib.instance.api.zoeWireProtocolKeysSignatureId(that: this);
}

@sealed
class SigningKeyImpl extends RustOpaque implements SigningKey {
  // Not to be used by end users
  SigningKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SigningKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SigningKey,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SigningKey,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SigningKeyPtr,
  );

  /// Sign a message with this signing key
  Future<Signature> sign({required List<int> message}) => RustLib.instance.api
      .zoeWireProtocolKeysSigningKeySign(that: this, message: message);
}

@sealed
class SocketAddrImpl extends RustOpaque implements SocketAddr {
  // Not to be used by end users
  SocketAddrImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SocketAddrImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SocketAddr,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SocketAddr,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_SocketAddrPtr,
  );
}

@sealed
class SystemCheckResultsImpl extends RustOpaque implements SystemCheckResults {
  // Not to be used by end users
  SystemCheckResultsImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  SystemCheckResultsImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_SystemCheckResults,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_SystemCheckResults,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_SystemCheckResultsPtr,
  );
}

@sealed
class TestInfoImpl extends RustOpaque implements TestInfo {
  // Not to be used by end users
  TestInfoImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  TestInfoImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_TestInfo,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_TestInfo,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_TestInfoPtr,
  );
}

@sealed
class VerifyErrorImpl extends RustOpaque implements VerifyError {
  // Not to be used by end users
  VerifyErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VerifyErrorImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VerifyError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VerifyError,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VerifyErrorPtr,
  );
}

@sealed
class VerifyingKeyErrorImpl extends RustOpaque implements VerifyingKeyError {
  // Not to be used by end users
  VerifyingKeyErrorImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VerifyingKeyErrorImpl.frbInternalSseDecode(
    BigInt ptr,
    int externalSizeOnNative,
  ) : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VerifyingKeyError,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VerifyingKeyError,
    rustArcDecrementStrongCountPtr: RustLib
        .instance
        .api
        .rust_arc_decrement_strong_count_VerifyingKeyErrorPtr,
  );
}

@sealed
class VerifyingKeyImpl extends RustOpaque implements VerifyingKey {
  // Not to be used by end users
  VerifyingKeyImpl.frbInternalDcoDecode(List<dynamic> wire)
    : super.frbInternalDcoDecode(wire, _kStaticData);

  // Not to be used by end users
  VerifyingKeyImpl.frbInternalSseDecode(BigInt ptr, int externalSizeOnNative)
    : super.frbInternalSseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        RustLib.instance.api.rust_arc_increment_strong_count_VerifyingKey,
    rustArcDecrementStrongCount:
        RustLib.instance.api.rust_arc_decrement_strong_count_VerifyingKey,
    rustArcDecrementStrongCountPtr:
        RustLib.instance.api.rust_arc_decrement_strong_count_VerifyingKeyPtr,
  );

  /// Get the algorithm for this key type
  ///
  /// flutter_rust_bridge:opaque
  Future<Algorithm> algorithm() =>
      RustLib.instance.api.zoeWireProtocolKeysVerifyingKeyAlgorithm(that: this);

  /// Encode the VerifyingKey to bytes for serialization.
  ///
  /// This method serializes the key using postcard format for efficient storage
  /// and transmission. The resulting bytes can be deserialized back to a
  /// `VerifyingKey` using `postcard::from_bytes()`.
  ///
  /// # Returns
  ///
  /// A `Vec<u8>` containing the serialized key data.
  ///
  /// # Examples
  ///
  /// ```rust
  /// use zoe_wire_protocol::{KeyPair, VerifyingKey};
  /// use rand::rngs::OsRng;
  ///
  /// let keypair = KeyPair::generate_ed25519(&mut OsRng);
  /// let verifying_key = keypair.public_key();
  ///
  /// // Serialize the key
  /// let key_bytes = verifying_key.encode();
  ///
  /// // Deserialize it back
  /// let restored_key: VerifyingKey = postcard::from_bytes(&key_bytes).unwrap();
  /// assert_eq!(&verifying_key, &restored_key);
  /// ```
  /// flutter_rust_bridge:opaque
  Future<Uint8List> encode() =>
      RustLib.instance.api.zoeWireProtocolKeysVerifyingKeyEncode(that: this);

  /// flutter_rust_bridge:opaque
  Future<KeyId> id() =>
      RustLib.instance.api.zoeWireProtocolKeysVerifyingKeyId(that: this);

  /// flutter_rust_bridge:opaque
  Future<Uint8List> toBytes() =>
      RustLib.instance.api.zoeWireProtocolKeysVerifyingKeyToBytes(that: this);

  /// Export the VerifyingKey to PEM format.
  ///
  /// This method serializes the key using postcard format and then encodes it
  /// as a PEM block with the label "ZOE PUBLIC KEY". This provides a standardized
  /// text format that's compatible with many cryptographic tools and libraries.
  ///
  /// # Returns
  ///
  /// A `Result<String, VerifyingKeyError>` containing the PEM-encoded key or an error.
  ///
  /// # Examples
  ///
  /// ```rust
  /// use zoe_wire_protocol::{KeyPair, VerifyingKey};
  /// use rand::rngs::OsRng;
  ///
  /// let keypair = KeyPair::generate_ed25519(&mut OsRng);
  /// let verifying_key = keypair.public_key();
  /// let pem_string = verifying_key.to_pem().unwrap();
  /// println!("Public key PEM:\n{}", pem_string);
  /// ```
  /// flutter_rust_bridge:opaque
  Future<String> toPem() =>
      RustLib.instance.api.zoeWireProtocolKeysVerifyingKeyToPem(that: this);

  /// Verify a signature against a message using the appropriate algorithm.
  ///
  /// This method automatically matches the signature type with the key type
  /// and returns `Ok(false)` if they don't match (rather than an error).
  ///
  /// # Arguments
  ///
  /// * `message` - The message bytes that were signed
  /// * `signature` - The signature to verify
  ///
  /// # Returns
  ///
  /// * `Ok(true)` - Signature is valid for this key and message
  /// * `Ok(false)` - Signature is invalid or key/signature types don't match
  /// * `Err(_)` - Verification error (malformed signature, etc.)
  ///
  /// # Examples
  ///
  /// ```rust
  /// use zoe_wire_protocol::{KeyPair, VerifyingKey, SigningKey};
  /// use rand::rngs::OsRng;
  ///
  /// # fn example() -> Result<(), Box<dyn std::error::Error>> {
  /// let keypair = KeyPair::generate_ed25519(&mut OsRng);
  /// let message = b"Hello, world!";
  /// let signature = keypair.sign(message);
  /// let verifying_key = keypair.public_key();
  ///
  /// let is_valid = verifying_key.verify(message, &signature)?;
  /// assert!(is_valid);
  /// # Ok(())
  /// # }
  /// ```
  /// flutter_rust_bridge:opaque
  Future<void> verify({
    required List<int> message,
    required Signature signature,
  }) => RustLib.instance.api.zoeWireProtocolKeysVerifyingKeyVerify(
    that: this,
    message: message,
    signature: signature,
  );
}
